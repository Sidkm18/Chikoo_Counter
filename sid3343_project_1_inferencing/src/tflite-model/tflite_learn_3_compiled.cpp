/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 25.05.2025 06:54:01

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238592;
#else
constexpr int kTensorArenaSize = 237568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 26577, -29883, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00019018688180949539, 0.00016523929662071168, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 63,-37,-54,119,-62,-6,-72,39,123,17,-45,-28,-16,50,-33,14,127,-85,-22,-17,100,41,90,-62,-69,-26,1,54,9,-40,-4,106, 
  /* [1][0][][] */ 40,74,74,-62,-65,70,12,18,-35,-17,39,102,108,43,29,0,-41,0,-53,-127,-70,39,16,106,87,64,-46,-2,88,-103,-96,-27, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0045275888405740261, 0.003933686763048172, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -725, 321, 290, 162, -439, -202, -812, 424, -21, 32, 286, 255, 341, 392, -434, -395, 38, -224, -348, 1778, -125, 420, -181, 303, 347, 90, -101, -399, -695, -105, -191, 376, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.4036976507632062e-05, 5.4081963753560558e-05, 6.2417340814135969e-05, 5.4796095355413854e-05, 4.8945439630188048e-05, 5.4543532314710319e-05, 6.7260800278745592e-05, 5.3295138059183955e-05, 6.3367981056217104e-05, 9.0857422037515789e-05, 5.558369230129756e-05, 7.251265924423933e-05, 5.6733806559350342e-05, 5.3996285714674741e-05, 5.3773092076880857e-05, 6.2597820942755789e-05, 5.3917436162009835e-05, 7.3868024628609419e-05, 5.2003098971908912e-05, 7.1686132287140936e-05, 6.6428612626623362e-05, 5.1242284826003015e-05, 5.5582695495104417e-05, 6.0619426221819595e-05, 5.9025493101216853e-05, 5.7452423789072782e-05, 7.4882300395984203e-05, 5.3136976930545643e-05, 5.4237290896708146e-05, 4.9064023187384009e-05, 5.4531308705918491e-05, 7.2658673161640763e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -56,-68,102,6,77,-26,-104,-120,43,-107,-127,-19,37,-8,-47,38,-57,-33,-84,-66,-87,-122,-14,90,-117,-9,61,-60,92,-18,-39,-92,65,-82,-112,47,-115,-99,-95,8,57,-105,-101,84,33,-111,90,-38, 
  /* [1][0][][] */ -42,50,-70,5,-32,89,56,13,86,-99,-87,61,79,-60,39,74,105,-33,46,127,-43,5,46,-1,-26,32,-23,120,25,21,110,-54,70,115,2,43,59,75,-16,-71,-88,14,-9,-82,-26,32,-27,-47, 
  /* [2][0][][] */ 53,46,-52,88,-12,-45,95,86,-79,79,-15,54,90,-39,84,-90,-54,-16,40,54,-80,-2,107,-8,-80,83,107,18,-48,83,84,92,-51,-8,-69,-79,-70,95,89,-25,-127,-59,24,9,-65,96,-15,-60, 
  /* [3][0][][] */ 83,-1,46,-15,-63,49,-92,46,58,30,66,79,97,90,72,4,114,100,-56,36,127,-82,-51,-97,61,-112,-83,108,48,-98,86,14,-52,-33,-16,-7,-85,-24,48,53,-24,-79,-95,-6,77,39,-37,-77, 
  /* [4][0][][] */ 48,101,-6,51,-38,-35,24,10,59,92,-22,109,21,-14,-24,-81,-30,-12,-80,8,113,-112,85,43,44,-15,56,-74,-63,27,-85,-68,67,118,5,-126,-62,-19,-127,52,-49,-78,-92,-112,27,118,33,54, 
  /* [5][0][][] */ 105,-86,73,78,32,-118,43,48,100,-117,-1,-95,19,74,37,32,25,58,-82,96,23,41,14,-49,-127,-66,-13,-108,44,31,23,-100,-44,-18,-79,7,-121,-38,27,-2,-113,-55,43,96,-42,0,20,-61, 
  /* [6][0][][] */ 65,-19,74,55,-74,-42,41,31,25,-63,37,-103,75,65,93,-72,-11,33,-10,93,-59,-108,112,13,-96,-41,5,-67,-19,-78,87,-56,-64,-127,-33,-77,-34,66,-112,95,19,50,32,17,-103,51,-75,-48, 
  /* [7][0][][] */ 123,84,-33,-36,-64,127,-21,8,120,11,-88,-16,68,-117,61,85,55,21,11,121,59,48,0,73,-118,115,59,72,-68,123,-25,48,35,38,79,116,-98,96,-8,-31,84,-70,97,79,63,-4,109,-105, 
  /* [8][0][][] */ 7,17,-35,-79,50,17,-65,-18,10,32,29,127,-3,-3,-82,-68,-53,76,-49,17,25,-26,71,127,-32,70,24,58,-66,6,-72,94,77,-32,38,-9,101,-5,-9,64,98,87,-104,-107,-11,-17,-18,91, 
  /* [9][0][][] */ 5,2,71,29,50,-66,30,-70,26,32,-6,65,-14,-46,-62,-18,6,-2,-42,-37,3,58,-61,-28,127,-7,-9,15,-1,-38,-9,60,37,0,16,-14,-44,8,-16,-27,35,-40,31,-57,48,16,-62,32, 
  /* [10][0][][] */ -45,98,90,-57,-10,110,125,31,42,35,40,-106,113,47,-17,19,-50,89,-96,-53,-13,39,66,-99,-40,68,-93,-93,-31,95,-78,-67,91,106,127,86,-37,20,-49,29,-62,122,-94,-22,-87,-72,-2,-51, 
  /* [11][0][][] */ 93,20,-9,84,93,40,52,27,87,73,-46,50,5,-87,31,-43,-44,-70,56,36,27,65,25,-102,-127,-61,-2,62,70,6,27,-6,-59,-47,48,45,-42,66,-23,-47,-38,84,-46,14,-24,-47,-65,-61, 
  /* [12][0][][] */ 25,80,-49,9,91,16,-17,39,-67,62,2,-29,-30,-17,60,-67,-97,-22,-35,-69,31,2,26,69,-127,-33,113,-83,102,28,-24,122,-73,-57,-32,29,4,-59,-18,39,88,47,-93,-24,-11,-83,-32,121, 
  /* [13][0][][] */ 120,-46,108,106,103,124,89,72,77,-97,25,-67,104,43,81,-39,-118,-64,-60,36,74,-16,127,-68,-120,53,23,32,-75,-75,86,49,51,116,-9,51,-76,-19,26,68,-82,87,-41,24,-33,28,3,-21, 
  /* [14][0][][] */ -61,-98,80,62,70,-32,-21,-125,-85,-47,62,75,-39,-88,-100,-87,-61,-61,4,19,-52,27,-10,54,-122,-78,-39,21,-125,-127,-85,29,99,-32,-41,0,87,113,27,-118,-16,-122,33,83,59,-120,61,-93, 
  /* [15][0][][] */ -9,-35,-30,54,73,-79,23,-89,32,-10,-82,44,77,1,-89,-100,75,-1,-92,0,32,6,43,107,127,47,20,78,2,37,28,-98,-4,2,-69,-19,-63,79,95,-62,25,86,-57,-42,14,-66,-48,-78, 
  /* [16][0][][] */ -73,-9,108,-60,45,108,-57,43,58,51,-111,127,-13,-8,-60,-66,117,76,80,71,114,80,-29,94,49,50,-81,60,-100,6,54,10,-106,77,63,59,-31,51,-40,-63,57,-44,66,93,65,113,111,-11, 
  /* [17][0][][] */ 66,-43,11,74,-29,-121,-11,-101,45,-51,95,-9,101,0,-55,-6,-43,70,72,107,-54,-15,36,-94,-48,76,-20,25,108,-6,13,76,-12,-42,32,12,-54,105,-103,-43,-127,-15,21,25,-1,-45,62,-68, 
  /* [18][0][][] */ -102,95,109,-79,-15,-121,-101,-1,-15,71,-120,16,-47,34,54,-67,20,-30,50,-30,100,-58,15,-81,100,-108,-28,107,22,26,-4,39,39,-37,-124,-123,-40,26,-41,62,-47,-8,-60,-20,-127,13,15,-13, 
  /* [19][0][][] */ 27,21,99,64,82,-48,77,113,96,-11,36,31,-44,52,-34,60,111,-62,111,76,17,90,-8,45,127,-50,19,-35,-42,-82,-31,47,90,-37,51,21,54,-32,9,-51,66,-46,-55,27,-29,67,88,-28, 
  /* [20][0][][] */ -7,52,59,77,-70,70,16,47,11,12,-74,55,-8,72,28,-64,-36,-30,-58,-22,22,-40,-60,-44,127,-62,-91,35,16,5,-39,91,79,33,-17,41,34,-29,-10,-88,-62,-27,-75,-88,-24,-46,-58,84, 
  /* [21][0][][] */ 108,95,79,-101,111,-70,87,24,7,-64,-60,-5,17,20,-40,-84,-113,-26,42,-9,117,-37,85,-110,0,-76,-17,91,28,20,2,-12,17,35,-82,-102,124,115,-127,-34,-38,15,41,-1,-92,-96,-76,107, 
  /* [22][0][][] */ 22,-55,-75,-99,81,-48,92,52,-113,81,-85,-124,105,-121,-108,-78,32,74,-122,-76,78,-77,19,23,72,-17,-106,99,-65,-73,-81,-114,41,56,12,3,0,-27,-60,-127,0,-19,-7,80,51,-122,83,-26, 
  /* [23][0][][] */ 69,-66,5,58,92,-97,18,-88,53,-70,90,26,27,-127,29,-30,74,-23,-88,96,86,-64,101,-58,-72,0,90,30,75,56,73,-25,-28,46,27,42,92,5,-104,-2,-122,6,19,-86,-55,-90,103,30, 
  /* [24][0][][] */ -61,-29,-96,-56,-71,-121,-54,-81,57,112,92,12,120,27,-22,-127,-82,44,37,-43,93,-63,-43,-58,-10,-12,87,69,113,67,4,-44,6,21,58,40,-42,-68,54,-32,-94,-84,108,17,30,-45,43,75, 
  /* [25][0][][] */ -99,-36,-90,-9,87,-70,-127,45,21,-119,-29,-19,80,-33,-89,-22,-83,48,40,-111,54,87,-21,-84,-49,-37,-73,50,86,-66,10,117,89,-95,50,79,95,-63,-30,-37,-107,87,-90,5,97,23,57,36, 
  /* [26][0][][] */ 37,-88,-16,-8,-72,-4,-5,-10,-76,-88,74,127,-59,-31,5,-12,86,21,-18,-44,11,51,70,64,115,44,6,36,9,2,-68,-3,-22,-46,-73,-76,-46,59,17,79,-67,74,39,20,-54,109,-20,76, 
  /* [27][0][][] */ 8,2,-70,-111,-127,-74,-73,-22,41,96,30,-84,-37,93,75,-32,62,-19,53,-92,-99,3,-37,-24,-109,42,-119,-10,56,22,-29,-15,56,63,-102,-95,-98,-70,-121,88,-89,12,21,9,93,21,63,97, 
  /* [28][0][][] */ 89,-3,71,26,-127,-69,-98,-92,-43,-123,59,54,-94,-86,-10,99,76,102,-81,56,-45,9,-114,-76,-116,70,-86,-76,-89,-79,-2,-29,-113,4,74,59,0,-110,-58,30,100,26,-108,49,-120,-27,9,35, 
  /* [29][0][][] */ 51,53,59,-60,-94,13,-126,8,124,-18,-99,-65,121,-77,-58,-52,-111,108,63,-76,-85,-28,65,41,47,9,-53,-32,-112,-13,127,-10,62,7,-68,-50,-12,114,0,111,88,116,-57,96,5,121,-38,-20, 
  /* [30][0][][] */ 24,-70,-66,34,-102,18,-63,-18,114,-20,2,17,-104,18,53,5,-9,36,87,-80,40,-102,-97,12,-77,24,-75,112,-18,-115,-88,0,-86,-75,-119,-54,11,-15,-7,21,84,-76,-10,127,100,-45,104,60, 
  /* [31][0][][] */ 67,-73,41,87,49,45,-49,-62,-11,0,-63,-9,81,-51,-35,81,-31,-65,31,62,62,34,0,127,104,-89,22,32,-51,-55,19,87,21,20,-63,-1,85,-22,-36,-76,73,-35,-22,20,13,-26,-13,31, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022965713869780302, 0.0022984833922237158, 0.0026527370791882277, 0.002328834030777216, 0.002080181147903204, 0.0023181000724434853, 0.0028585840482264757, 0.0022650433238595724, 0.002693139249458909, 0.0038614403456449509, 0.0023623069282621145, 0.0030817880760878325, 0.002411186695098877, 0.0022948421537876129, 0.0022853564005345106, 0.0026604074519127607, 0.0022914910223335028, 0.0031393910758197308, 0.0022101316135376692, 0.0030466606840491295, 0.0028232159093022346, 0.0021777970250695944, 0.0023622645530849695, 0.0025763255544006824, 0.0025085834786295891, 0.0024417280219495296, 0.0031824978068470955, 0.0022583215031772852, 0.0023050848394632339, 0.0020852210000157356, 0.0023175806272774935, 0.0030879934784024954, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { -257, 1019, 2093, 4472, 11911, -824, -972, 17833, 1500, 9597, 450, -821, 4297, -4473, 1756, -1928, -286, -3579, 1049, 1484, 3203, 3451, 4856, 1596, -1642, -2411, 292, 1363, 1485, 1236, -1144, 2559, 5126, 5247, 4290, 1926, 12936, 1826, 1165, -1199, 1685, 14585, -1538, 1607, 10155, 172, 1483, 3965, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00033485639141872525, 0.00029491289751604199, 0.00013613537885248661, 0.00013619451783597469, 7.9451405326835811e-05, 0.00015443553274963051, 0.00036573151010088623, 5.634065018966794e-05, 0.00019518293265718967, 8.5080391727387905e-05, 0.00017255899729207158, 0.00049563648644834757, 0.00015244609676301479, 0.00014377452316693962, 0.00040914668352343142, 0.00014148387708701193, 0.00012209598207846284, 4.7586738219251856e-05, 0.00025353979435749352, 0.00037039944436401129, 0.00020381515787448734, 0.00014799031487200409, 0.00013237448001746088, 0.00016103725647553802, 0.0002107170585077256, 0.0001954638137249276, 0.00044753306428901851, 0.00038070417940616608, 0.00021844480943400413, 0.00048268449609167874, 0.00013781522284261882, 0.00025675576762296259, 0.00013046695676166564, 0.00013882739585824311, 0.0001031909923767671, 0.00012506994244176894, 6.8830675445497036e-05, 0.00014085799921303988, 0.00013202040281612426, 0.00020147280883975327, 0.00015797329251654446, 6.575554289156571e-05, 0.00013844166824128479, 0.00010671461495803669, 8.0084901128429919e-05, 0.00021511045633815229, 0.00017268818919546902, 0.00019424995116423815, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 18,-20,-63,22,-127,11,-56,1, 
  /* [1][0][][] */ -115,29,127,6,-117,-15,0,-17, 
  /* [2][0][][] */ 13,68,-38,17,-51,-127,-17,75, 
  /* [3][0][][] */ -84,33,-2,127,0,-38,-58,-39, 
  /* [4][0][][] */ 12,-17,50,-126,-27,30,-127,22, 
  /* [5][0][][] */ 69,126,-59,-48,-38,-9,35,-127, 
  /* [6][0][][] */ 53,-43,47,98,-46,-127,-2,-89, 
  /* [7][0][][] */ 28,120,-46,-49,-56,-17,26,-127, 
  /* [8][0][][] */ -2,-31,56,-2,10,11,-47,-127, 
  /* [9][0][][] */ -81,-5,-103,28,-127,-79,-91,-22, 
  /* [10][0][][] */ 81,3,102,-32,-127,10,84,95, 
  /* [11][0][][] */ 127,-28,-89,22,63,-4,-93,4, 
  /* [12][0][][] */ -27,-96,127,18,24,5,-64,69, 
  /* [13][0][][] */ 43,-72,83,-17,19,-117,55,-127, 
  /* [14][0][][] */ -100,34,127,0,-39,-57,48,-47, 
  /* [15][0][][] */ 45,116,-42,-71,-53,17,46,-127, 
  /* [16][0][][] */ 33,102,-56,63,-2,-45,-16,127, 
  /* [17][0][][] */ 26,78,-19,81,-50,75,-127,43, 
  /* [18][0][][] */ 60,-24,127,-31,75,-91,7,-27, 
  /* [19][0][][] */ 4,-11,18,127,21,-40,-28,-79, 
  /* [20][0][][] */ 0,23,-26,48,-9,53,-127,20, 
  /* [21][0][][] */ 5,-2,51,21,28,127,54,-53, 
  /* [22][0][][] */ 57,-127,-4,68,-88,73,25,29, 
  /* [23][0][][] */ -46,-119,-9,-117,-2,-76,-5,-127, 
  /* [24][0][][] */ 29,8,-10,-85,-54,-127,-54,66, 
  /* [25][0][][] */ 69,68,127,12,2,26,-50,-5, 
  /* [26][0][][] */ -116,41,127,-48,-90,-21,94,-8, 
  /* [27][0][][] */ -73,34,-28,-93,26,127,-13,87, 
  /* [28][0][][] */ 11,-105,73,55,46,12,-30,127, 
  /* [29][0][][] */ -127,61,89,-35,-121,-5,97,-30, 
  /* [30][0][][] */ 95,-88,18,71,-127,-29,36,-83, 
  /* [31][0][][] */ 46,80,57,-30,-99,-17,18,127, 
  /* [32][0][][] */ -31,-22,87,-57,41,6,-127,-121, 
  /* [33][0][][] */ 54,34,98,-127,17,45,-33,61, 
  /* [34][0][][] */ -27,-114,101,-21,39,127,68,-80, 
  /* [35][0][][] */ 33,15,115,11,8,127,30,-37, 
  /* [36][0][][] */ -26,36,-15,54,74,-127,21,26, 
  /* [37][0][][] */ 19,-21,65,26,-127,115,-31,-14, 
  /* [38][0][][] */ -127,-20,-97,-22,93,-29,-112,-29, 
  /* [39][0][][] */ 20,-1,33,-121,-29,47,-127,12, 
  /* [40][0][][] */ 98,-32,-72,-127,64,68,65,-25, 
  /* [41][0][][] */ 13,-19,1,127,-104,17,-76,-53, 
  /* [42][0][][] */ -93,27,73,127,-65,-75,-67,9, 
  /* [43][0][][] */ 88,-112,88,28,-114,33,127,41, 
  /* [44][0][][] */ 15,-46,32,-78,-20,127,41,15, 
  /* [45][0][][] */ -30,31,-37,6,72,-44,-127,-37, 
  /* [46][0][][] */ -102,-100,-3,-17,32,127,-32,-114, 
  /* [47][0][][] */ -120,-97,-51,29,28,127,-24,-58, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0043756421655416489, 0.0038536915089935064, 0.0017789109842851758, 0.0017796836327761412, 0.0010382089531049132, 0.0020180430728942156, 0.004779093898832798, 0.00073621567571535707, 0.0025504983495920897, 0.0011117642279714346, 0.0022548662964254618, 0.0064765908755362034, 0.0019920466002076864, 0.0018787332810461521, 0.005346409510821104, 0.0018488009227439761, 0.0015954549890011549, 0.00062182638794183731, 0.0033130603842437267, 0.0048400908708572388, 0.0026632975786924362, 0.0019338220590725541, 0.0017297664890065789, 0.0021043091546744108, 0.0027534861583262682, 0.0025541686918586493, 0.0058480128645896912, 0.0049747452139854431, 0.002854466438293457, 0.0063073444180190563, 0.0018008617917075753, 0.0033550842199474573, 0.0017048403387889266, 0.0018140882020816207, 0.0013484193477779627, 0.0016343165189027786, 0.00089942553313449025, 0.0018406225135549903, 0.0017251396784558892, 0.0026326894294470549, 0.0020642718300223351, 0.00085924216546118259, 0.0018090477678924799, 0.0013944633537903428, 0.0010464870138093829, 0.0028108956757932901, 0.002256554551422596, 0.0025383068714290857, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -1249, 1154, -13792, 8256, 8431, -937, 8694, 1502, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00010536747140577063, 0.00013665847654920071, 0.00011886656284332275, 8.4089442680124193e-05, 0.0001498918718425557, 7.5836185715161264e-05, 0.00012144069478381425, 0.00013530664728023112, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 10,30,34,31,-18,-33,45,50,9,18,-6,-6,38,-29,55,-25,-52,-21,-127,-19,44,-44,25,46,20,-19,46,-20,-8,-47,4,37,-45,43,53,-1,39,63,-56,-49,14,12,-87,-31,34,19,-29,-53, 
  /* [1][0][][] */ -18,-39,-4,65,-23,-6,-8,-7,17,3,-12,-46,-6,-1,19,0,44,22,49,-35,2,19,27,-52,-4,-19,-30,-37,-33,13,-16,-5,-32,-32,-91,67,11,15,-127,-17,19,-18,70,31,102,-16,-42,47, 
  /* [2][0][][] */ -5,1,30,-26,-18,-15,-8,116,-48,85,-44,-7,127,-14,38,-12,-53,-70,0,30,-8,-7,25,-2,7,60,6,58,20,8,76,24,-65,-11,23,67,16,72,63,-112,36,36,-47,-45,10,32,0,-9, 
  /* [3][0][][] */ 29,-3,-127,-23,12,-8,62,-39,-32,-19,-11,11,-42,-57,43,22,13,55,14,29,-57,24,-58,-3,-38,-66,32,10,-78,-64,-56,26,86,49,-46,26,-52,11,34,-14,35,-61,-28,9,59,-52,45,-23, 
  /* [4][0][][] */ 1,48,-6,-9,26,-9,-80,-115,-32,17,-16,83,1,-24,1,52,47,53,-88,7,22,-4,-26,-13,41,-5,1,-14,-20,14,-8,-33,18,-32,-127,26,-34,-9,37,40,-27,-35,83,61,20,-47,10,17, 
  /* [5][0][][] */ -63,-31,88,8,77,25,45,-15,-127,11,-110,-11,-88,-87,55,88,-18,19,17,2,47,35,21,3,-18,10,7,0,-29,-13,-20,-37,-29,34,60,28,-3,62,-24,-15,41,-32,-62,44,-18,12,46,33, 
  /* [6][0][][] */ 90,63,-16,30,31,-28,-102,-72,-7,3,-3,70,-18,-35,-8,34,-45,35,22,3,127,-18,64,113,3,-58,13,-24,-58,-20,-35,-61,47,-32,15,-10,-9,38,-48,43,-58,-47,-70,-50,-26,-50,46,-10, 
  /* [7][0][][] */ 0,53,35,-80,61,-54,-45,-15,15,9,33,34,-42,-1,38,-4,-19,18,-21,49,-46,-4,-13,53,11,-27,9,51,0,33,-42,-15,41,-18,-38,-43,-60,6,127,-19,8,-30,-26,-10,37,2,71,9, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0044781174510717392, 0.0058079850859940052, 0.005051828920841217, 0.0035738011356443167, 0.0063704042695462704, 0.00322303781285882, 0.0051612295210361481, 0.0057505322620272636, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { -157, -2517, 3686, -747, -106, -265, 4003, 15345, -1794, 16088, 7315, -4023, 6068, -2598, 8984, -1028, 1221, -470, 5341, -1605, -3119, -2207, -16228, -3560, 3647, -603, 4718, 1285, 9700, 8385, 6682, -2339, -7190, 168, -2552, -6305, 1496, 7973, -5169, 12684, -1253, 1879, -6220, -1600, -6333, 12985, 161, 7281, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 5.9358902944950387e-05, 0.00028208820731379092, 0.00019442698976490647, 0.0001957479544216767, 0.00019789129146374762, 0.00048457065713591874, 0.00020564657461363822, 0.00040569552220404148, 0.00025428069056943059, 7.640510011697188e-05, 0.00015255570178851485, 0.00013125699479132891, 0.00018589629326015711, 0.00024629355175420642, 0.00014212391397450119, 0.00017978851974476129, 0.00064785924041643739, 0.0002899584942497313, 9.3674076197203249e-05, 0.0003375192463863641, 0.00012880339636467397, 0.00021477253176271915, 9.7439959063194692e-05, 0.00031939026666805148, 0.00019379875448066741, 0.00033981754677370191, 9.7649492090567946e-05, 0.00018740614177659154, 0.000188444260857068, 9.1735535534098744e-05, 0.00016419509483966976, 0.00015677792544011027, 0.00018617884779814631, 0.0002670594840310514, 0.00034996122121810913, 0.00010289579950040206, 0.00011347505642333999, 9.2652029707096517e-05, 0.00034674530616030097, 0.00010676388774299994, 0.00026215036632493138, 0.0002053657517535612, 0.00013680310803465545, 0.00028521771309897304, 0.00026704918127506971, 7.5111383921466768e-05, 0.00020594205125235021, 0.00012119329767301679, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 92,84,44,25,-17,-67,31,18,-84,-10,2,79,53,14,-16,13,45,-51,83,50,70,-29,15,17,-11,-61,55,23,-35,-127,19,47,24,-101,13,30,-22,36,-3,-127,7,-127,-29,-10,5,-120,55,-127, 127,10,63,-98,54,61,42,-55,-127,-86,41,127,5,-47,-127,35,-11,104,59,47,49,97,121,38,127,-52,-19,-127,-127,-73,-127,127,41,-94,-84,127,34,-94,-69,-111,27,127,-60,30,-59,-59,37,18, 88,1,23,-76,-26,-54,38,7,-84,-6,35,63,31,26,27,4,-51,4,72,48,-25,-43,-67,-2,-9,-55,-71,-18,-46,-92,-2,17,63,-56,33,54,-59,-63,6,-98,10,-48,115,-11,-2,-127,31,-68, 
  /* [0][1][][] */ 94,5,19,54,56,78,0,-127,64,-127,-127,-70,1,50,-65,127,-127,101,44,70,1,119,73,-37,-17,117,79,36,20,-56,-85,58,58,87,-74,55,-67,-2,9,-73,-3,-85,29,-89,42,-21,19,-37, -5,127,-127,66,127,62,-127,11,69,-10,-11,114,-127,127,-33,4,44,-127,-127,12,117,57,127,-127,-88,84,-54,8,-11,-51,45,-19,127,-21,121,-96,94,-127,127,127,127,62,-97,-2,126,55,-127,-28, 48,-6,5,-127,71,57,19,-90,100,-72,-106,-12,1,40,-60,119,82,-11,1,71,34,-127,30,123,-45,127,-85,3,26,6,-48,49,-4,87,127,66,-64,-17,-35,-32,-10,-42,127,127,127,-41,68,-22, 
  /* [0][2][][] */ 45,57,25,49,-14,2,33,23,7,-60,-25,-16,36,-54,26,-49,-15,26,59,-51,127,-10,25,-55,-70,-64,120,126,-4,-76,-54,64,27,30,-19,1,-60,28,13,6,-7,-94,22,-26,4,-18,55,-52, 45,7,6,6,-19,-127,-5,-70,-4,-56,13,-37,-18,-50,-23,41,1,-41,2,114,105,83,89,32,41,-44,-78,76,-114,-3,-52,23,17,127,-54,-7,-98,-107,33,-12,-79,81,-6,-4,-51,-69,72,-19, 26,-1,24,-60,-1,-3,42,29,-8,-43,25,4,28,-48,38,-19,-6,-35,65,-127,19,-72,-61,72,-39,-61,-127,62,-11,-125,12,36,36,-35,-10,59,-127,-70,-12,-29,-11,-22,5,5,-11,-3,-7,-51, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0026726624928414822, 0.012701153755187988, 0.0087541667744517326, 0.0088136438280344009, 0.0089101484045386314, 0.021818021312355995, 0.0092593338340520859, 0.018266631290316582, 0.011449107900261879, 0.0034401756711304188, 0.0068688918836414814, 0.0059099076315760612, 0.0083700679242610931, 0.01108948327600956, 0.0063991956412792206, 0.0080950623378157616, 0.029170166701078415, 0.013055517338216305, 0.0042177191935479641, 0.015196962282061577, 0.0057994332164525986, 0.0096702342852950096, 0.0043872799724340439, 0.014380697160959244, 0.0087258797138929367, 0.015300444327294827, 0.0043967142701148987, 0.00843804981559515, 0.0084847910329699516, 0.0041304356418550014, 0.0073929610662162304, 0.0070589995011687279, 0.0083827897906303406, 0.012024478986859322, 0.015757167711853981, 0.0046329316683113575, 0.0051092677749693394, 0.0041717011481523514, 0.015612370334565639, 0.0048070941120386124, 0.011803443543612957, 0.0092466892674565315, 0.0061596240848302841, 0.012842061929404736, 0.012024014256894588, 0.0033819251693785191, 0.009272637777030468, 0.0054567852057516575, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { -1015, -1659, 3210, -406, -3221, 2529, 1870, 22078, 3435, 2300, 7754, 2056, 1599, 8542, 6003, -3122, 17663, 1702, 452, -2844, 14, -612, 1568, 7687, 738, 8123, 2850, -626, 6822, 200, 1290, -1717, -1517, -2713, -6054, 2694, 2722, 2506, 1843, 2805, 1947, 1263, 4711, 2025, 15638, 6964, -1608, 618, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00028873377596028149, 0.00028973331791348755, 0.00020836692419834435, 0.00021092880342621356, 0.00016681849956512451, 0.00011312410788377747, 0.00027718697674572468, 5.7399862271267921e-05, 0.00010925285459961742, 0.00024170539109036326, 0.00010248317266814411, 0.00017854759062174708, 0.00023822119692340493, 0.0001009946790873073, 0.00011961877316934988, 0.00015113184053916484, 5.8915982663165778e-05, 0.0001396914740325883, 0.0003921464376617223, 0.00022122096561361104, 0.0001262010628124699, 0.00029571447521448135, 0.00025855167768895626, 0.00012047094787703827, 0.00022037065355107188, 8.3020728197880089e-05, 0.0002202232280978933, 0.00021864325390197337, 7.5423733505886048e-05, 0.00035685201874002814, 0.00016076728934422135, 0.00022587843704968691, 0.00030521152075380087, 0.00011002878454746678, 8.6984153313096613e-05, 0.00017050551832653582, 0.0001463468506699428, 0.00015884374442975968, 0.00024592489353381097, 0.00015739510126877576, 0.00031121657229959965, 0.00019951471767853945, 0.00013746274635195732, 0.00022779920254833996, 5.8478388382354751e-05, 0.00010264101001666859, 0.00014169223140925169, 0.00032009059214033186, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -16,-44,-45,89,5,-72,-83,-127, 
  /* [1][0][][] */ 127,-24,40,-30,26,-75,1,29, 
  /* [2][0][][] */ -5,40,14,-127,11,100,-51,70, 
  /* [3][0][][] */ -26,127,-53,-77,-90,6,23,-86, 
  /* [4][0][][] */ -3,-54,-92,-33,19,-67,-70,-127, 
  /* [5][0][][] */ -44,-85,84,56,24,127,42,-120, 
  /* [6][0][][] */ 0,15,-50,33,9,12,-127,-40, 
  /* [7][0][][] */ 21,-18,19,31,-45,59,127,75, 
  /* [8][0][][] */ -22,54,-82,-13,-54,-127,-82,70, 
  /* [9][0][][] */ 60,16,-65,-20,4,127,-64,108, 
  /* [10][0][][] */ -7,59,79,125,97,127,-6,-57, 
  /* [11][0][][] */ -22,-55,-3,47,-127,45,-16,-18, 
  /* [12][0][][] */ -25,54,81,-52,64,-95,-127,-67, 
  /* [13][0][][] */ 49,24,-73,-123,-21,-72,-71,127, 
  /* [14][0][][] */ -35,-127,-2,-68,9,-81,7,-120, 
  /* [15][0][][] */ 8,66,72,89,92,127,-4,-33, 
  /* [16][0][][] */ 42,19,-27,-127,43,103,-71,68, 
  /* [17][0][][] */ -101,83,-118,39,15,96,-127,46, 
  /* [18][0][][] */ -127,68,27,-19,-84,15,-18,-1, 
  /* [19][0][][] */ 127,7,-45,-27,82,-64,70,-94, 
  /* [20][0][][] */ 127,-69,33,-49,-57,19,82,-3, 
  /* [21][0][][] */ 25,-27,-41,49,-9,30,127,47, 
  /* [22][0][][] */ 112,39,-123,-98,19,113,68,127, 
  /* [23][0][][] */ -29,34,-41,-90,39,7,-127,9, 
  /* [24][0][][] */ 127,-60,-104,-26,110,-47,-4,13, 
  /* [25][0][][] */ -21,-77,70,-50,68,127,-26,-104, 
  /* [26][0][][] */ 28,-74,53,23,127,-55,-45,-76, 
  /* [27][0][][] */ -14,-127,92,96,11,-24,-49,112, 
  /* [28][0][][] */ -8,50,-127,-56,91,-102,-57,98, 
  /* [29][0][][] */ -90,44,127,-84,13,-30,25,26, 
  /* [30][0][][] */ 119,-78,71,-40,-74,-127,54,-42, 
  /* [31][0][][] */ 22,29,46,-6,-29,-8,-127,0, 
  /* [32][0][][] */ 17,-18,27,127,-32,-89,-45,-90, 
  /* [33][0][][] */ 96,-76,-75,127,-127,89,-68,-37, 
  /* [34][0][][] */ 3,-108,-18,-62,-99,127,50,-34, 
  /* [35][0][][] */ 28,127,96,18,8,26,-57,-4, 
  /* [36][0][][] */ 37,115,-65,-127,-112,32,70,-102, 
  /* [37][0][][] */ 39,-7,61,31,35,127,53,18, 
  /* [38][0][][] */ -59,-90,87,51,18,-8,-56,127, 
  /* [39][0][][] */ 8,41,127,-54,-21,43,-24,23, 
  /* [40][0][][] */ 15,-1,13,-4,6,-20,127,-3, 
  /* [41][0][][] */ -23,-12,-67,-127,-66,-91,-67,38, 
  /* [42][0][][] */ 44,-26,68,-46,-127,-53,-50,29, 
  /* [43][0][][] */ 91,-4,65,53,-84,-112,127,37, 
  /* [44][0][][] */ -69,-127,-5,-79,-15,11,-7,-118, 
  /* [45][0][][] */ 14,119,81,74,49,127,-77,26, 
  /* [46][0][][] */ -102,-14,24,65,94,47,-59,127, 
  /* [47][0][][] */ 14,75,-47,-43,1,-28,47,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.004462516400963068, 0.0044779647141695023, 0.0032204086892306805, 0.0032600038684904575, 0.0025782582815736532, 0.0017483863048255444, 0.0042840549722313881, 0.0008871418540365994, 0.0016885541845113039, 0.0037356703542172909, 0.0015839255647733808, 0.002759536961093545, 0.0036818205844610929, 0.0015609202673658729, 0.0018487643683329225, 0.002335813594982028, 0.0009105742210522294, 0.0021589973475784063, 0.0060608075000345707, 0.0034190739970654249, 0.0019504966912791133, 0.0045704063959419727, 0.0039960378780961037, 0.0018619351321831346, 0.0034059321042150259, 0.0012831243220716715, 0.0034036533907055855, 0.0033792343456298113, 0.001165709225460887, 0.0055153155699372292, 0.0024847339373081923, 0.0034910573158413172, 0.0047171874903142452, 0.0017005465924739838, 0.0013443810166791081, 0.0026352428831160069, 0.0022618593648076057, 0.0024550047237426043, 0.0038008848205208778, 0.0024326152633875608, 0.0048099984414875507, 0.0030835936777293682, 0.0021245514508336782, 0.0035207436885684729, 0.0009038109565153718, 0.0015863650478422642, 0.0021899200510233641, 0.0049471505917608738, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { 16416, 3021, 15336, -5647, -15222, 8986, 2326, 16539, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 7.1252281486522406e-05, 0.00010655382357072085, 7.8078221122268587e-05, 8.5147337813396007e-05, 0.0001050548889907077, 0.00011602429003687575, 9.8303200502414256e-05, 0.00010087983537232503, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-27,-18,-5,-18,-88,-26,-12,52,-40,-46,-19,-29,66,-44,1,4,-8,13,17,20,-31,4,9,31,-3,10,29,16,66,-42,-82,25,-68,16,-27,37,-46,-4,19,-65,-25,-31,-48,-64,-76,5,-12, 
  /* [1][0][][] */ -71,-1,89,-59,68,39,60,31,-20,18,-3,95,22,-30,-127,-57,-116,-93,41,-15,-1,102,-54,2,24,-105,36,98,48,-17,30,49,50,32,8,36,-80,-39,24,16,10,-40,-98,26,-17,-51,-93,26, 
  /* [2][0][][] */ 106,51,-24,-72,-59,3,-58,-98,35,32,-93,-57,-16,65,-68,49,-4,83,4,6,71,54,7,-1,-127,30,28,-58,-7,28,34,-90,6,-33,14,17,-53,-39,4,40,-124,-116,-34,-53,-65,-101,32,-3, 
  /* [3][0][][] */ 15,-2,21,20,-109,-20,-14,47,-26,-57,-16,80,9,-23,-85,-44,-29,34,5,-62,-40,127,21,-55,23,51,56,-45,12,11,15,18,30,29,11,-3,43,64,24,-1,36,-19,26,-45,-19,5,20,37, 
  /* [4][0][][] */ -52,6,-127,17,-6,96,25,43,-31,124,45,70,28,-74,-13,27,-14,-10,-6,42,-22,45,-87,27,4,-20,46,-14,50,-60,121,97,64,37,16,-47,-82,14,4,-19,39,24,27,36,62,45,31,71, 
  /* [5][0][][] */ -32,5,40,-10,54,-68,-39,-30,-38,-70,8,-36,46,8,-16,1,34,-7,0,29,22,68,20,14,14,-9,-43,-11,-36,-2,-127,-15,-47,-16,30,-24,2,-26,2,-15,-15,6,-33,-10,30,34,-2,37, 
  /* [6][0][][] */ 9,53,-1,66,-15,35,-56,47,-77,-33,44,18,46,4,42,16,9,-40,-46,33,8,54,29,-42,-83,-15,-33,18,-94,-15,-77,-3,8,-31,-42,-67,127,-8,-51,-66,52,32,29,-55,-71,-18,-51,-38, 
  /* [7][0][][] */ -55,13,-86,18,-36,-8,-17,-18,-58,-52,40,62,56,21,-72,-79,-47,85,-11,-10,59,15,30,-46,-48,95,-61,-107,-53,-9,-113,-14,-22,-38,-68,-4,-21,-33,-51,-6,-27,59,45,-20,-62,-61,127,-50, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0030282218940556049, 0.004528537392616272, 0.0033183242194354534, 0.0036187616642564535, 0.0044648326002061367, 0.0049310321919620037, 0.0041778860613703728, 0.00428739283233881, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 6933, 7165, 9179, 10236, 32909, -1616, -1512, 187, -1087, -11617, -1707, -1885, 12464, 7864, 4809, 1621, 7910, 4756, 469, -2697, 6819, -3754, 4710, -132, 4508, 9148, -728, 75, -164, 499, 10462, 4074, 3586, -1832, 1731, -746, 4152, 3039, 212, -323, 5941, -7151, 3786, 1407, -1076, 1044, 5630, -2877, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00028060938348062336, 0.00011025275307474658, 6.9980553234927356e-05, 0.00011335282761137933, 5.5746473663020879e-05, 0.0005899628740735352, 0.00022537367476616055, 0.00048497115494683385, 0.00033120586886070669, 0.00024318126088473946, 0.00013883506471756846, 0.00039631116669625044, 8.3697399531956762e-05, 0.00015430081111844629, 0.00048949453048408031, 9.1443478595465422e-05, 0.00015343794075306505, 0.00016065633099060506, 0.00065975903999060392, 0.00027287946431897581, 0.00016855774447321892, 0.00017701876640785486, 0.00017376136383973062, 0.00022682719281874597, 0.00018210806592833251, 0.00017202492745127529, 0.00056812306866049767, 0.00018783249834086746, 0.00037454359699040651, 0.00037414042162708938, 0.00015429688210133463, 0.00036111881490796804, 0.00033027451718226075, 0.001022023381665349, 0.00014894748164806515, 0.00019881367916241288, 0.00037573304143734276, 0.00016050730482675135, 0.0002090947818942368, 0.00034081863122992218, 0.00021086719061713666, 0.00015305088891182095, 0.000257958221482113, 0.00045018293894827366, 0.00033036607783287764, 0.00043717995868064463, 0.0002120459103025496, 0.00026229597278870642, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -94,-1,63,-9,-127,4,-124,-4,-9,127,119,16,-9,81,12,23,11,28,30,-15,-127,-3,17,47,-25,16,-2,-68,25,-112,77,48,-7,26,46,-34,24,-127,-25,127,-71,45,-5,-5,-13,16,8,-10, 11,-91,-2,41,-55,14,-107,-6,28,41,127,83,-20,-66,-76,-52,-8,-40,120,64,13,69,-66,15,-79,-4,1,-127,8,-67,-39,-116,-10,20,-52,-127,-15,12,12,100,127,-2,-10,127,10,-127,11,-31, -127,7,55,5,-84,10,-77,-7,-10,92,16,-2,-9,73,22,73,-41,-3,19,-37,-105,-31,61,18,10,-13,12,-48,-37,-127,47,-8,-8,11,-61,-27,24,-97,3,94,-65,44,-10,7,11,12,11,53, 
  /* [0][1][][] */ 53,-69,47,-4,-81,1,72,-25,-59,61,89,37,-52,-41,-79,107,-41,7,46,127,-10,76,-85,-13,-31,-91,-14,-65,127,29,36,127,-127,7,114,9,0,33,-104,-110,54,-26,17,13,-127,52,4,-51, 110,-66,-127,-127,52,127,20,127,-127,-82,-62,127,-82,-117,-127,-127,-16,-127,-70,70,122,127,-58,80,-127,72,-118,81,-65,-51,-127,-112,1,127,-127,116,-127,-72,127,-32,-56,127,-127,-89,104,76,-127,-74, 44,-98,103,-9,-41,-33,12,-34,-37,34,22,-16,-50,-93,-77,125,-127,-46,11,96,-33,71,-6,-127,22,-68,127,-10,-50,119,-47,106,80,-34,-67,23,0,-8,-9,-52,35,-15,-14,-11,6,31,-17,127, 
  /* [0][2][][] */ -111,-62,54,-26,-53,3,99,-8,94,38,106,19,-69,64,21,-31,26,57,9,-30,-59,-9,69,43,-24,-20,-2,-2,8,50,84,-26,-20,14,99,22,28,-34,-41,-1,-45,12,12,-19,-21,-6,-6,15, -69,-127,83,-67,-34,-17,127,-8,105,39,70,-36,76,-127,-71,-40,-51,42,-127,12,-49,12,-127,-4,14,-127,0,24,6,76,5,-103,-16,-36,-22,35,-3,83,51,-46,-18,16,26,-53,35,-25,0,13, -78,-39,57,-11,-74,26,61,-10,46,13,30,33,-127,39,30,12,-57,55,-5,-42,-41,-28,121,-57,-6,-33,14,20,-17,42,35,-62,-18,22,-46,14,31,-32,-8,-49,-28,42,24,-5,-2,5,8,2, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.011925898492336273, 0.0046857418492436409, 0.0029741735197603703, 0.004817495122551918, 0.002369225025177002, 0.025073422119021416, 0.0095783807337284088, 0.020611273124814034, 0.014076249673962593, 0.010335203260183334, 0.0059004900977015495, 0.016843223944306374, 0.0035571393091231585, 0.0065577845089137554, 0.020803516730666161, 0.0038863476365804672, 0.006521112285554409, 0.0068278941325843334, 0.028039759024977684, 0.011597377248108387, 0.0071637039072811604, 0.0075232973322272301, 0.0073848580941557884, 0.0096401553601026535, 0.0077395923435688019, 0.0073110591620206833, 0.024145228788256645, 0.0079828808084130287, 0.015918102115392685, 0.015900967642664909, 0.0065576173365116119, 0.015347549691796303, 0.014036666601896286, 0.043435990810394287, 0.0063302679918706417, 0.0084495814517140388, 0.015968654304742813, 0.0068215602077543736, 0.0088865282014012337, 0.01448479201644659, 0.0089618554338812828, 0.0065046628005802631, 0.010963224805891514, 0.019132774323225021, 0.014040557667613029, 0.018580147996544838, 0.0090119512751698494, 0.011147579178214073, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 11559, -492, 1430, 1138, 2587, 1018, 6454, -487, 12525, 10793, -388, -262, 1681, 1746, 230, 2609, 5134, 2376, -1680, -1056, 2560, 2958, 3068, 13, 3927, 2483, 7592, -428, 5794, -421, 7271, 7802, 7079, 1120, 1380, 1529, 2700, 1121, 1490, 2273, -249, 4722, 2041, 6240, 3418, 2475, 104, 2365, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 8.8098044216167182e-05, 0.00035005650715902448, 0.00032933871261775494, 0.00024695784668438137, 0.00026436996995471418, 0.0001423015637556091, 9.2312111519277096e-05, 0.00027280458016321063, 7.381063187494874e-05, 7.2506423748563975e-05, 0.00022017082665115595, 0.00015917231212370098, 0.00027548355865292251, 0.00020187160407658666, 9.7727563115768135e-05, 0.00023256735585164279, 0.00012056383275194094, 0.0003102432528976351, 0.00021361750259529799, 0.00012115050776628777, 0.00029017383349128067, 0.0001302077725995332, 0.00020334302098490298, 0.00042186948121525347, 0.00016924756346270442, 0.00030825674184598029, 0.00012718903599306941, 0.00054614752298220992, 0.00016358021821361035, 0.00015279292711056769, 0.00010394021228421479, 7.9685742093715817e-05, 0.0001307670318055898, 0.00010260930866934359, 0.00025707887834869325, 0.00042288796976208687, 0.00021205938537605107, 0.00031050335383042693, 0.00033555651316419244, 9.9773074907716364e-05, 0.00028469410608522594, 0.00014734857541043311, 0.00035649674828164279, 0.00011190770601388067, 0.00025811730301938951, 0.0001194211290567182, 0.00029004761017858982, 0.00029739332967437804, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 66,-88,38,5,60,-127,0,-68, 
  /* [1][0][][] */ -31,-66,-73,42,-127,42,-40,13, 
  /* [2][0][][] */ 67,-46,40,-24,127,-29,-7,62, 
  /* [3][0][][] */ -8,127,-12,111,17,12,-54,-54, 
  /* [4][0][][] */ -34,127,66,-32,38,23,-55,16, 
  /* [5][0][][] */ -83,23,-4,13,127,-27,81,-20, 
  /* [6][0][][] */ 101,-45,116,34,14,127,80,-27, 
  /* [7][0][][] */ -48,-61,66,75,90,23,-52,127, 
  /* [8][0][][] */ 27,-11,-31,-100,-4,127,-79,19, 
  /* [9][0][][] */ -127,20,-89,-1,109,-44,-62,20, 
  /* [10][0][][] */ -23,-76,52,39,-34,-95,-127,-65, 
  /* [11][0][][] */ 42,85,-17,3,-31,-76,28,127, 
  /* [12][0][][] */ 58,-60,-127,29,-85,120,46,78, 
  /* [13][0][][] */ -54,-33,-127,26,-80,83,29,43, 
  /* [14][0][][] */ -69,127,-81,77,95,47,-9,79, 
  /* [15][0][][] */ -75,-19,-9,-4,85,74,-59,-127, 
  /* [16][0][][] */ 79,-124,-127,-18,-63,123,-65,-10, 
  /* [17][0][][] */ 15,127,-109,-53,-70,21,58,-116, 
  /* [18][0][][] */ -62,-99,33,10,127,-69,-42,63, 
  /* [19][0][][] */ -64,96,-11,47,13,-127,-125,68, 
  /* [20][0][][] */ 95,-23,29,-74,2,-71,23,127, 
  /* [21][0][][] */ 49,-28,127,105,-30,121,97,-11, 
  /* [22][0][][] */ -28,100,1,-3,127,-56,-114,-67, 
  /* [23][0][][] */ 31,-54,53,127,6,-63,75,-16, 
  /* [24][0][][] */ -36,61,127,-85,-18,-32,10,-40, 
  /* [25][0][][] */ -49,-126,101,66,36,-9,-28,127, 
  /* [26][0][][] */ 41,-21,-127,-67,-84,57,15,85, 
  /* [27][0][][] */ 36,127,-108,-52,-40,31,37,-116, 
  /* [28][0][][] */ -38,51,-52,-87,-9,-29,-127,-35, 
  /* [29][0][][] */ -70,38,-127,-52,90,29,-43,-13, 
  /* [30][0][][] */ 102,-74,17,-39,-127,121,123,62, 
  /* [31][0][][] */ -73,104,-43,91,127,-75,-21,-8, 
  /* [32][0][][] */ 20,76,58,-46,127,-27,-24,-96, 
  /* [33][0][][] */ -120,47,-127,4,57,14,-22,4, 
  /* [34][0][][] */ 43,1,63,-63,-42,-127,80,116, 
  /* [35][0][][] */ -127,36,54,-9,-86,8,5,-3, 
  /* [36][0][][] */ -2,-42,-33,32,-13,12,127,30, 
  /* [37][0][][] */ -24,-33,-63,-54,-29,-127,-70,-22, 
  /* [38][0][][] */ -103,17,24,33,-127,15,47,1, 
  /* [39][0][][] */ -41,-54,44,-24,-18,114,-112,-127, 
  /* [40][0][][] */ 67,-123,27,80,-51,-59,127,70, 
  /* [41][0][][] */ 25,127,90,46,31,23,-102,-34, 
  /* [42][0][][] */ 37,127,-34,-18,-35,21,-16,-55, 
  /* [43][0][][] */ -66,70,-112,-127,21,2,-81,87, 
  /* [44][0][][] */ -51,19,-17,11,33,127,-9,-11, 
  /* [45][0][][] */ -12,72,-83,-47,-71,-96,-5,127, 
  /* [46][0][][] */ 33,104,-93,-37,-55,30,6,-127, 
  /* [47][0][][] */ 20,1,-14,-53,-55,-127,-26,33, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0013446969678625464, 0.0053431368432939053, 0.0050269076600670815, 0.0037694759666919708, 0.0040352484211325645, 0.0021720400545746088, 0.0014090188778936863, 0.0041639911942183971, 0.0011266189394518733, 0.0011067120358347893, 0.003360608359798789, 0.002429549116641283, 0.0042048823088407516, 0.0030812956392765045, 0.0014916784130036831, 0.0035498247016221285, 0.0018402429996058345, 0.0047354414127767086, 0.0032605808228254318, 0.001849197898991406, 0.0044291093945503235, 0.0019874447025358677, 0.0031037549488246441, 0.0064392643980681896, 0.0025833339896053076, 0.0047051203437149525, 0.0019413678674027324, 0.0083361994475126266, 0.0024968297220766544, 0.0023321763146668673, 0.0015865060267969966, 0.0012162945931777358, 0.0019959809724241495, 0.0015661916695535183, 0.0039239595644176006, 0.0064548100344836712, 0.0032367983367294073, 0.0047394116409122944, 0.0051218140870332718, 0.0015229004202410579, 0.0043454687111079693, 0.00224907579831779, 0.0054414384067058563, 0.0017081190599128604, 0.0039398097433149815, 0.0018228011904284358, 0.0044271824881434441, 0.0045393048785626888, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 5830, -609, -2085, 3459, 2522, -19711, -2242, -6782, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00018463729065842927, 0.0001380099420202896, 0.00021808489691466093, 0.0001526776613900438, 0.00020018778741359711, 8.877515938365832e-05, 0.00011990162602160126, 0.00012102439359296113, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -29,18,8,30,-18,13,1,27,-41,-6,-34,-6,-13,11,35,7,-45,-16,32,-15,-23,127,-20,-16,-24,-39,5,34,-32,36,10,-23,-8,17,30,36,18,4,27,-22,0,-31,-16,-11,-21,24,21,14, 
  /* [1][0][][] */ 8,54,1,46,30,31,46,113,-48,-47,76,-31,-39,-29,28,-23,-18,0,35,5,31,-127,-4,-67,11,16,-17,13,-4,8,-33,-57,-39,2,20,-10,19,63,71,-15,24,21,41,-27,-34,42,6,44, 
  /* [2][0][][] */ -3,26,2,28,27,20,-32,34,22,12,66,19,4,-15,32,-53,23,27,-8,8,-14,127,7,-14,20,-44,-3,2,-21,32,-22,-58,-18,9,19,-39,30,-13,-34,-29,24,-17,-8,-47,-31,29,10,20, 
  /* [3][0][][] */ -40,53,-4,1,-17,40,62,-1,5,11,11,14,-21,34,43,13,-13,2,8,-2,47,-84,-10,19,-21,-1,-127,32,-34,-30,-9,8,-46,-16,13,26,29,-14,-34,-35,3,-15,13,21,24,-11,45,22, 
  /* [4][0][][] */ 24,-1,-47,8,24,-10,20,-9,-55,7,-3,26,8,-7,-18,15,-33,32,-16,-11,-2,-127,-6,-4,36,31,33,-48,40,-7,3,10,-11,52,28,-8,-20,17,-12,8,-6,-59,-89,17,30,38,0,-8, 
  /* [5][0][][] */ 2,47,74,9,4,22,10,-98,65,-33,-9,5,99,-65,-6,20,20,-35,35,3,-28,127,23,14,90,4,92,45,94,62,-10,-38,-69,-36,111,39,-43,-52,11,-96,20,-24,65,63,-46,-40,-23,-31, 
  /* [6][0][][] */ 65,-13,-28,21,40,-28,42,-45,47,30,-4,-31,-19,46,18,-78,21,-127,-27,-22,25,-20,-9,21,-34,-31,43,-23,57,-33,112,47,46,45,26,-48,-62,19,57,-37,-27,21,-75,56,35,1,41,-46, 
  /* [7][0][][] */ -13,45,47,55,-1,22,56,95,55,31,8,71,-66,-12,29,-18,87,-20,-26,-18,-6,-127,-4,-104,-80,71,53,15,2,22,22,-24,19,-31,10,20,-21,99,-97,-32,6,-3,25,-17,-52,7,42,24, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0078470846638083458, 0.0058654225431382656, 0.0092686079442501068, 0.0064888005144894123, 0.008507980965077877, 0.0037729442119598389, 0.0050958190113306046, 0.0051435367204248905, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 24288, 27331, 8688, 18824, 4114, 12286, 18200, 6217, 62294, -2603, -884, 15751, 16862, -3855, 7106, 1233, 11203, 33784, 20051, 2138, 5534, -7128, 1800, 2848, 58182, 38070, 889, 857, 5103, 11100, -1406, 1072, -16669, 16402, 34782, 31590, 27898, 21744, -126, 1426, 4108, 47482, 1594, 6015, 603, -1301, 23335, 10273, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 4.2961881263181567e-05, 6.3617975683882833e-05, 7.8109231253620237e-05, 6.5116226323880255e-05, 8.538516703993082e-05, 9.9069526186212897e-05, 0.00012192203575978056, 0.00011369364801794291, 2.9631795769091696e-05, 5.2157698519295081e-05, 6.6784974478650838e-05, 6.1119775637052953e-05, 0.00015850989439059049, 4.5376418711384758e-05, 7.2563954745419323e-05, 7.0930604124441743e-05, 2.5234525310224853e-05, 6.6467269789427519e-05, 4.8819005314726382e-05, 0.00015436130343005061, 6.5367734350729734e-05, 0.00028855621349066496, 0.00021344049309846014, 8.3466075011529028e-05, 3.048345934075769e-05, 5.6835786381270736e-05, 7.7676275395788252e-05, 9.1043562861159444e-05, 4.113868999411352e-05, 0.00016041379421949387, 0.0002225817006547004, 0.00031253040651790798, 7.2814720624592155e-05, 4.5755678002024069e-05, 5.9173096815356985e-05, 8.3014128904324025e-05, 7.6596421422436833e-05, 0.00011781310604419559, 0.00027351579046808183, 7.3214097938034683e-05, 0.00016472589049953967, 2.9418546546366997e-05, 7.3324350523762405e-05, 4.2338208004366606e-05, 0.00037686413270421326, 0.00011948565224884078, 5.6658314861124381e-05, 7.7894670539535582e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -31,-92,-43,-68,-57,11,-56,-50,-72,48,41,-89,-32,31,-83,62,101,-65,-48,97,46,60,-60,82,-70,-59,57,49,48,-61,80,48,49,-62,-98,-36,-113,-61,110,65,-12,2,29,58,48,111,-44,-57, -65,-127,-76,-123,-127,6,-82,-102,-78,88,69,-95,-66,71,-121,110,106,-117,-97,-3,72,65,102,127,-72,-88,98,76,75,-93,101,72,72,-100,-126,-55,-127,-88,114,83,-80,-53,54,72,51,127,-91,-84, -25,-64,-45,-62,-82,6,-39,-42,-57,55,62,-50,-43,75,-76,42,72,-48,-35,-53,42,-127,-78,52,-53,-47,32,33,41,-34,54,33,58,-61,-87,-42,-83,-44,15,28,-50,-20,48,43,5,73,-39,-35, 
  /* [0][1][][] */ -60,-110,-68,-66,-77,-31,-93,-65,-89,85,71,-104,-56,66,-127,61,103,-79,-73,106,90,75,-80,92,-118,-92,66,88,86,-76,94,70,89,-79,-90,-58,-95,-82,108,117,-68,-48,57,66,84,116,-67,-92, -127,-127,-127,-127,-125,-126,-127,-127,-127,127,127,-127,-127,127,-81,127,127,-127,-127,-52,127,76,127,126,-127,-127,127,127,127,-127,127,127,127,-127,-127,-127,-102,-127,127,127,-127,-127,127,127,127,103,-127,-127, -58,-50,-93,-66,-95,-116,-107,-62,-81,91,82,-76,-80,102,-87,57,114,-59,-56,-127,84,-124,-94,58,-73,-75,31,41,79,-65,77,60,87,-92,-83,-83,-99,-69,47,48,-93,-51,73,96,14,12,-58,-58, 
  /* [0][2][][] */ -24,-16,-41,-31,-47,-23,-62,-26,-75,72,44,-30,-20,15,-77,33,50,-33,-33,11,41,28,-32,32,-77,-36,13,41,45,-16,51,30,53,-38,-71,-53,-18,-29,13,91,-40,-61,54,25,28,30,-56,-45, -52,-16,-81,-42,-86,-127,-91,-59,-101,93,58,-49,-47,77,-80,53,71,-50,-45,-69,77,13,36,30,-76,-69,37,57,68,-57,65,52,67,-88,-105,-101,-38,-51,20,108,-92,-87,90,61,42,0,-89,-60, -36,15,-61,-23,-44,-109,-72,-32,-50,82,39,-35,-27,46,-17,30,76,-38,-34,-88,38,-51,-44,27,-40,-45,5,28,44,-25,38,35,51,-75,-93,-68,-32,-35,15,58,-58,-38,49,45,-30,-6,-36,-52, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0018258799100294709, 0.0027037640102207661, 0.003319642273709178, 0.0027674394659698009, 0.003628869540989399, 0.0042104548774659634, 0.0051816864870488644, 0.0048319799825549126, 0.001259351265616715, 0.0022167020943015814, 0.0028383613098412752, 0.0025975904427468777, 0.00673667062073946, 0.0019284976879134774, 0.0030839680694043636, 0.003014550544321537, 0.0010724673047661781, 0.0028248589951545, 0.0020748076494783163, 0.0065603549592196941, 0.0027781287208199501, 0.012263638898730278, 0.0090712206438183784, 0.0035473080351948738, 0.0012955470010638237, 0.0024155208375304937, 0.0033012416679412127, 0.003869351465255022, 0.0017483942210674286, 0.0068175862543284893, 0.0094597218558192253, 0.013282542116940022, 0.0030946256592869759, 0.0019446162041276693, 0.0025148566346615553, 0.0035281004384160042, 0.0032553479541093111, 0.0050070569850504398, 0.011624420993030071, 0.003111599013209343, 0.0070008505135774612, 0.0012502882163971663, 0.0031162849627435207, 0.0017993737710639834, 0.016016725450754166, 0.0050781401805579662, 0.0024079782888293266, 0.0033105234615504742, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 599, 3204, 1552, -101, -598, 557, 7130, 2912, 1774, -1996, 1085, -262, 5421, 57, 938, -2198, -174, 4598, 704, 1642, -901, 25524, 1715, -1334, 983, 4034, 2179, -1433, 73, 211, -1924, -1364, 3596, 722, 4238, 8423, 4298, 5264, -3046, -1695, -873, 1367, 696, 476, -1885, -2425, 3012, 939, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00037213347968645394, 0.00022341033036354929, 0.00028698064852505922, 0.00041951466118916869, 0.00037226040149107575, 0.00021401210688054562, 0.00011690177052514628, 0.00020575964299496263, 0.00025467469822615385, 0.00026184713351540267, 0.00034794790553860366, 0.00027843346470035613, 0.00012955015699844807, 0.00050457636825740337, 0.00044884247472509742, 0.00018117579747922719, 0.00051570113282650709, 0.00015585121582262218, 0.00033379782689735293, 0.00022948095283936709, 0.00026543965213932097, 6.3092644268181175e-05, 0.00026182760484516621, 0.00020627233607228845, 0.00027642070199362934, 0.00019447976956143975, 0.00028943506185896695, 0.00029923804686404765, 0.00051245704526081681, 0.00049851380754262209, 0.00023601760040037334, 0.00024033074441831559, 0.00021704587561544031, 0.00042437700903974473, 0.00020427093841135502, 0.00012137454905314371, 0.00021789224410895258, 0.00015784682182129472, 0.0002135400427505374, 0.00023730449902359396, 0.00037854237598367035, 0.00035451978328637779, 0.00035635274252854288, 0.00034987222170457244, 0.0002575279213488102, 0.00022415634884964675, 0.00021102976461406797, 0.00025061683845706284, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -34,60,-49,42,24,127,28,33, 
  /* [1][0][][] */ 49,-127,-101,-24,-35,51,56,-40, 
  /* [2][0][][] */ -58,40,-40,-110,-35,-127,-31,-70, 
  /* [3][0][][] */ -13,127,56,33,7,-88,-31,25, 
  /* [4][0][][] */ -115,46,-127,88,4,-18,-49,-59, 
  /* [5][0][][] */ 91,-98,-127,39,10,-28,84,-52, 
  /* [6][0][][] */ -19,-84,-62,15,-127,-42,-61,89, 
  /* [7][0][][] */ -24,-49,-17,-42,47,-1,-30,127, 
  /* [8][0][][] */ 13,24,-112,-101,55,-39,-127,-86, 
  /* [9][0][][] */ -127,55,-8,96,-12,65,92,-5, 
  /* [10][0][][] */ -22,-7,93,-127,-22,62,20,29, 
  /* [11][0][][] */ 108,-17,100,52,-36,42,95,127, 
  /* [12][0][][] */ 64,39,28,-44,60,120,92,-127, 
  /* [13][0][][] */ 36,51,-36,63,-9,-127,-38,50, 
  /* [14][0][][] */ 9,-127,-30,-32,18,66,33,-30, 
  /* [15][0][][] */ -122,-8,0,-88,54,127,-78,-22, 
  /* [16][0][][] */ 5,-37,119,3,-29,20,127,67, 
  /* [17][0][][] */ 64,13,50,25,-9,-86,-29,-127, 
  /* [18][0][][] */ -115,21,-77,-13,-19,-127,24,-96, 
  /* [19][0][][] */ 77,37,127,-4,-74,35,123,119, 
  /* [20][0][][] */ 27,127,59,-14,24,38,56,5, 
  /* [21][0][][] */ -37,32,25,-104,-57,127,-7,-10, 
  /* [22][0][][] */ 34,7,93,-14,-64,17,127,89, 
  /* [23][0][][] */ -69,124,53,45,-92,-92,-123,127, 
  /* [24][0][][] */ -14,-4,100,28,-122,127,-6,-94, 
  /* [25][0][][] */ -47,23,79,25,-127,54,-73,22, 
  /* [26][0][][] */ -45,-127,27,-44,14,37,-15,-15, 
  /* [27][0][][] */ -24,73,34,52,-20,127,-32,-7, 
  /* [28][0][][] */ 17,-127,49,19,60,118,43,30, 
  /* [29][0][][] */ 20,127,-21,33,-61,-64,-12,16, 
  /* [30][0][][] */ -44,69,102,100,-127,-69,-52,-119, 
  /* [31][0][][] */ 11,66,26,61,-54,-13,18,-127, 
  /* [32][0][][] */ -17,-23,-52,69,-127,-33,-46,3, 
  /* [33][0][][] */ 74,25,65,48,-37,61,58,127, 
  /* [34][0][][] */ 121,18,-127,-35,-46,-2,64,39, 
  /* [35][0][][] */ 127,103,103,-121,-50,-105,41,101, 
  /* [36][0][][] */ -38,-117,127,43,63,57,11,-37, 
  /* [37][0][][] */ -10,11,-22,-3,-14,-53,-43,127, 
  /* [38][0][][] */ 127,4,50,13,3,17,-54,33, 
  /* [39][0][][] */ 62,83,-127,-126,-110,95,47,-64, 
  /* [40][0][][] */ -38,127,-49,80,-56,-28,-63,-18, 
  /* [41][0][][] */ -127,38,-22,-55,61,46,-7,-59, 
  /* [42][0][][] */ 50,-29,-6,-23,-21,127,14,82, 
  /* [43][0][][] */ -72,39,127,15,72,12,-36,5, 
  /* [44][0][][] */ 13,127,-5,33,-45,-67,-19,-5, 
  /* [45][0][][] */ -77,85,61,-127,-77,16,-79,-49, 
  /* [46][0][][] */ 33,-46,-25,19,33,7,-127,70, 
  /* [47][0][][] */ -83,-127,15,65,36,-81,17,81, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0036321817897260189, 0.0021805802825838327, 0.0028010536916553974, 0.0040946425870060921, 0.0036334206815809011, 0.0020888496655970812, 0.0011410112492740154, 0.0020083021372556686, 0.0024857339449226856, 0.0025557400658726692, 0.0033961203880608082, 0.002717629773542285, 0.0012644649250432849, 0.0049248812720179558, 0.0043808943592011929, 0.0017683532787486911, 0.0050334637053310871, 0.0015211745630949736, 0.0032580094411969185, 0.0022398321889340878, 0.0025908045936375856, 0.00061581120826303959, 0.0025555493775755167, 0.0020133061334490776, 0.0026979842223227024, 0.001898205722682178, 0.0028250098694115877, 0.0029206911567598581, 0.0050017996691167355, 0.0048657078295946121, 0.0023036326747387648, 0.0023457307834178209, 0.002118460601195693, 0.0041421009227633476, 0.0019937716424465179, 0.0011846674606204033, 0.0021267214324325323, 0.0015406524762511253, 0.0020842421799898148, 0.0023161934223026037, 0.0036947354674339294, 0.0034602645318955183, 0.003478155005723238, 0.0034149026032537222, 0.0025135825853794813, 0.0021878618281334639, 0.0020597407128661871, 0.0024461273569613695, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 6452, -11065, -492, 7037, 2748, -6043, 2622, 5522, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00022223356063477695, 0.0001635099615668878, 6.5022963099181652e-05, 0.00019034456636290997, 0.00028930784901604056, 0.00010651358752511442, 0.00018052521045319736, 9.7614494734443724e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -22,-1,-6,-32,-63,-16,-5,-12,64,10,11,-4,7,12,-16,7,-26,15,-18,-19,-3,12,-23,4,24,-6,90,10,-11,-82,-18,15,-10,30,127,-14,-28,-40,25,-38,25,8,-2,-23,-18,2,-20,-86, 
  /* [1][0][][] */ 16,-31,-13,61,1,-11,14,36,71,74,41,-52,-53,69,-1,2,-10,-32,21,-27,-64,36,-42,28,80,13,-31,31,23,2,127,22,-15,-36,-33,-4,-16,6,-26,-14,3,-23,2,25,-10,37,26,19, 
  /* [2][0][][] */ -72,-3,-90,119,-76,-76,31,-69,-87,40,61,-95,-15,-7,-52,-3,122,40,-83,-42,-81,-25,-48,11,93,-50,127,-7,87,-17,-67,18,16,-31,46,-6,-62,23,2,-109,76,-80,-67,-127,-5,-71,-68,104, 
  /* [3][0][][] */ 21,-54,12,-43,33,-23,-11,-82,48,-71,2,-28,-88,-78,-21,9,11,-18,43,-41,-10,29,-87,0,71,-39,47,13,1,-2,1,-31,-41,34,21,-35,-52,26,-8,-6,127,17,-53,41,-58,50,-14,-53, 
  /* [4][0][][] */ 23,6,14,12,8,35,-8,-10,44,25,8,-45,0,6,-63,21,3,21,21,-20,-24,28,5,41,38,5,-28,8,50,-11,-18,27,-5,-7,32,23,-127,4,54,8,11,-6,2,15,-32,46,-26,-95, 
  /* [5][0][][] */ -38,-97,35,115,-26,-1,-47,107,-98,82,52,33,-78,26,71,-34,-6,36,25,-1,-3,37,42,52,-42,13,-20,41,-41,-96,40,26,-108,-56,-25,2,127,2,-19,16,-31,-8,83,99,26,39,48,49, 
  /* [6][0][][] */ 86,-2,-16,-13,86,-33,-24,-64,36,25,32,-29,-5,10,8,0,-4,2,-13,-28,-33,15,10,21,58,-59,47,2,-25,113,-17,10,48,22,-127,-18,-93,-39,25,-63,-10,-6,-13,-90,7,4,-21,-7, 
  /* [7][0][][] */ -35,-74,52,-49,18,126,52,-39,1,-95,-52,-1,2,-20,-59,-2,10,-58,117,65,47,-38,16,-6,-22,11,115,-4,53,29,13,-1,-33,-27,-53,112,-127,93,-34,-36,-44,51,4,-70,25,-14,69,-29, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0094449259340763092, 0.0069491732865571976, 0.0027634759899228811, 0.0080896439030766487, 0.012295583263039589, 0.004526827484369278, 0.0076723215170204639, 0.0041486159898340702, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 9870, 3391, -2034, 7184, -739, -999, 3031, -326, 1543, 5459, -337, 601, -2082, 11296, 4040, -982, -4857, -153, 1007, 1662, 13926, -356, -15982, -677, -4672, -354, 760, -63, -736, -1950, -6245, 1159, 18689, -1374, 1549, 1795, -693, 2412, -970, 1583, 19447, -1744, 4299, 230, 697, 254, -5319, 7134, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00019634592172224075, 0.00027214977308176458, 0.00020109878096263856, 0.00032257774728350341, 0.00028376473346725106, 0.00064968370134010911, 9.0257832198403776e-05, 0.00028318140539340675, 8.5619743913412094e-05, 0.00021776101493742317, 0.00038332873373292387, 0.00053242605645209551, 0.00027456888346932828, 0.00017918771482072771, 0.00019083630468230695, 0.00044701425940729678, 5.8635992900235578e-05, 0.0040980307385325432, 0.00045112674706615508, 0.00023184508609119803, 0.00012972050171811134, 0.00053292274242267013, 0.00011636604904197156, 0.00021375306823756546, 0.00033846590667963028, 0.00023095593496691436, 0.0004397268348839134, 0.00025702093262225389, 0.00080913963029161096, 0.00019837911531794816, 0.00015125858772080392, 0.00078797462629154325, 6.1983941122889519e-05, 0.00045526339090429246, 0.00023267598589882255, 0.00083062920020893216, 0.00019689270993694663, 0.00027771558961831033, 0.0012921805027872324, 0.00048596342094242573, 5.2974657592130825e-05, 0.00037310944753699005, 0.00019703172438312322, 0.00015804858412593603, 0.00040815083775669336, 0.00033854949288070202, 0.00010209330503130332, 0.00041400719783268869, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -61,48,-44,-49,-5,-19,22,-16,-12,-21,6,39,-9,-104,-89,22,127,2,55,34,-97,-62,112,-104,-7,-46,-7,108,0,17,40,127,-34,-10,-18,3,1,-34,-5,18,102,-87,-67,42,76,-114,-28,-7, -15,-127,33,-127,0,-21,-78,127,59,-79,22,39,10,-127,-116,13,-55,16,-33,-86,-82,5,89,127,17,-7,10,127,48,-1,17,-104,-91,26,-11,-26,127,-127,61,-10,-14,-113,-79,23,101,66,49,-38, -31,-3,17,-26,-1,34,24,64,-6,11,1,28,22,31,-98,29,62,15,-37,9,-127,47,74,29,-7,68,4,-43,-4,3,17,-39,-67,2,-4,-3,-18,108,-11,10,75,-36,5,-40,61,35,-35,-15, 
  /* [0][1][][] */ -27,-16,-120,-13,-27,23,3,1,23,-67,-5,-107,-31,-61,-127,124,125,9,127,85,-22,127,122,110,-4,-53,-41,-3,56,-32,39,-109,-7,-23,-59,-3,6,-93,46,21,87,127,-42,-18,-66,127,56,-36, -127,53,127,109,127,-116,-127,-9,-22,-127,-127,-127,127,-23,-16,40,11,-127,-107,-127,93,-8,-82,-106,127,-35,127,-63,127,127,-36,75,-127,-127,127,-127,82,-90,-127,-127,18,99,-127,14,-127,-72,127,127, -24,5,9,18,42,127,-9,52,70,8,51,-52,-11,-18,-88,-19,75,54,-12,53,-59,-120,127,-21,4,127,16,-1,62,32,127,25,7,12,56,2,-16,72,54,-9,5,96,122,-19,-47,-57,65,-9, 
  /* [0][2][][] */ -31,11,-52,-2,-2,-17,24,-15,37,14,9,44,-4,-7,89,6,17,4,55,8,-40,-2,69,38,-12,-46,-16,-79,12,-9,-4,-41,-26,59,-12,-13,-66,4,-7,8,29,-10,-30,-68,-26,12,-59,-38, -19,-43,59,-2,-76,-21,-81,-94,127,66,52,51,-9,-42,28,20,61,107,-45,-20,-59,8,19,-27,-3,-40,-73,-88,-6,-28,97,23,-76,54,-73,-26,-1,-116,37,44,-127,-22,-112,127,22,0,53,-51, 6,-11,25,-3,-38,27,29,-96,16,-12,-18,23,7,33,98,-127,36,-21,-36,-16,-51,9,21,-1,-8,37,-33,17,9,-21,19,10,-35,51,-48,-14,-110,75,-18,27,12,-5,53,49,-22,-17,-73,-24, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0083447014912962914, 0.011566365137696266, 0.0085466979071497917, 0.013709554448723793, 0.012060001492500305, 0.027611557394266129, 0.0038359577301889658, 0.012035209685564041, 0.003638839116320014, 0.00925484299659729, 0.01629147119820118, 0.02262810617685318, 0.011669177561998367, 0.0076154777780175209, 0.0081105427816510201, 0.018998105078935623, 0.0024920296855270863, 0.17416630685329437, 0.01917288638651371, 0.0098534161224961281, 0.0055131209082901478, 0.022649215534329414, 0.0049455570988357067, 0.0090845050290226936, 0.014384800568223, 0.0098156267777085304, 0.018688390031456947, 0.010923389345407486, 0.034388434141874313, 0.0084311123937368393, 0.0064284899272024632, 0.033488921821117401, 0.0026343173813074827, 0.019348694011569023, 0.0098887290805578232, 0.03530174121260643, 0.0083679398521780968, 0.011802912689745426, 0.054917670786380768, 0.020653445273637772, 0.0022514229640364647, 0.0158571507781744, 0.0083738481625914574, 0.0067170648835599422, 0.01734641008079052, 0.014388353563845158, 0.0043389652855694294, 0.017595306038856506, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 4128, 843, 3113, 6140, 240, 5267, 1662, 1402, 2299, 4575, 2813, 6175, 2218, 1841, 2907, 88, 421, -2090, 5247, 2621, 1850, 6216, 8059, 421, 4202, 3426, 1689, -314, -1904, 1176, 6215, 2563, 886, 874, 590, -416, 1611, 1893, -9, 1930, 1538, 5551, 2282, 790, 3708, 1075, -161, 10296, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00022386728960555047, 0.00055674492614343762, 0.00024982754257507622, 0.0001705060712993145, 0.0015779064269736409, 0.00014100254338700324, 0.00037251145113259554, 0.00039515233947895467, 0.00025602889945730567, 0.00016781638259999454, 0.00026707962388172746, 0.000110319655505009, 0.0003531856054905802, 0.000213545688893646, 0.00018496243865229189, 0.00026735829305835068, 0.00035894892062060535, 0.00035431975265964866, 0.00018363002163823694, 0.00040398360579274595, 0.00041123174014501274, 0.00013975148613099009, 0.00010376177669968456, 0.0003914721601177007, 0.00016316572146024555, 0.00026965193683281541, 0.00040193487075157464, 0.00023496313951909542, 0.0002472309279255569, 0.00077867991058155894, 0.00015113536210265011, 0.00031685165595263243, 0.00071803672472015023, 0.00028486910741776228, 0.0010604391572996974, 0.00026947242440655828, 0.00018673278100322932, 0.000210176469408907, 0.00024699294590391219, 0.0003706860588863492, 0.00029236715636216104, 0.00015407720638904721, 0.00018338979862164706, 0.00035764113999903202, 0.00015211607387755066, 0.00047470576828345656, 0.00044395893928594887, 9.4793569587636739e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -117,-15,20,-104,-122,127,7,-66, 
  /* [1][0][][] */ 79,-1,20,-29,4,53,-127,47, 
  /* [2][0][][] */ -45,50,-93,85,-51,127,21,56, 
  /* [3][0][][] */ 100,-25,-37,78,-3,-74,13,127, 
  /* [4][0][][] */ -83,-8,-5,11,-19,-35,127,6, 
  /* [5][0][][] */ 62,121,24,41,-127,-61,17,-34, 
  /* [6][0][][] */ -8,-69,34,127,12,-100,-20,42, 
  /* [7][0][][] */ 110,2,99,-1,-80,23,62,127, 
  /* [8][0][][] */ -41,-127,46,50,83,-33,-29,7, 
  /* [9][0][][] */ -78,-107,21,-30,-28,2,-49,127, 
  /* [10][0][][] */ -20,-119,8,114,54,127,15,-30, 
  /* [11][0][][] */ -127,-113,37,-71,64,55,-47,120, 
  /* [12][0][][] */ 73,-15,81,-72,28,-127,74,-1, 
  /* [13][0][][] */ 33,19,23,127,-14,16,38,-61, 
  /* [14][0][][] */ -42,-7,40,5,127,-19,-2,122, 
  /* [15][0][][] */ -78,127,27,92,56,95,-37,80, 
  /* [16][0][][] */ 1,-37,-56,-127,-62,57,21,51, 
  /* [17][0][][] */ 17,127,5,49,-19,-44,-5,21, 
  /* [18][0][][] */ 22,41,-6,-127,-52,-82,28,-22, 
  /* [19][0][][] */ 37,-81,-127,-112,-78,123,25,-8, 
  /* [20][0][][] */ 32,4,25,-7,127,28,37,-42, 
  /* [21][0][][] */ -127,-70,-73,-98,46,34,54,-14, 
  /* [22][0][][] */ -71,-45,81,119,49,-49,-53,127, 
  /* [23][0][][] */ 24,42,-48,126,127,29,39,98, 
  /* [24][0][][] */ 127,0,-111,-24,-7,-26,45,-55, 
  /* [25][0][][] */ -3,-10,-38,-21,73,-28,-127,-51, 
  /* [26][0][][] */ 127,12,103,-29,-86,46,65,109, 
  /* [27][0][][] */ 25,-56,-52,114,30,-12,-12,-127, 
  /* [28][0][][] */ -72,127,87,71,65,-24,-29,10, 
  /* [29][0][][] */ 5,-2,54,1,-73,2,127,62, 
  /* [30][0][][] */ -54,-72,53,-59,-78,127,57,45, 
  /* [31][0][][] */ 112,19,90,-23,-104,67,78,127, 
  /* [32][0][][] */ -110,-14,-29,34,-21,23,127,20, 
  /* [33][0][][] */ -127,121,57,81,31,21,-72,11, 
  /* [34][0][][] */ 110,11,29,-17,2,46,-127,16, 
  /* [35][0][][] */ 6,-3,19,34,-48,30,13,-127, 
  /* [36][0][][] */ 28,-18,-64,-127,48,-3,40,121, 
  /* [37][0][][] */ 48,-44,-41,-53,-19,30,57,-127, 
  /* [38][0][][] */ 26,127,12,118,-71,-98,-24,-26, 
  /* [39][0][][] */ 109,-6,103,-2,-95,41,127,114, 
  /* [40][0][][] */ -72,-80,127,103,-17,-28,-93,37, 
  /* [41][0][][] */ 27,-13,9,21,18,-66,-14,127, 
  /* [42][0][][] */ 58,-89,-82,-77,-61,71,44,-127, 
  /* [43][0][][] */ 89,-11,107,-34,-76,-16,103,127, 
  /* [44][0][][] */ -125,-107,-47,127,111,-5,-87,53, 
  /* [45][0][][] */ 127,-14,90,-30,-41,20,-13,80, 
  /* [46][0][][] */ 42,-118,9,72,127,0,50,16, 
  /* [47][0][][] */ 76,127,-39,118,-26,-83,39,-81, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0025926814414560795, 0.0064478479325771332, 0.002893335884436965, 0.0019746874459087849, 0.018274258822202682, 0.0016329973004758358, 0.0043141790665686131, 0.0045763906091451645, 0.0029651557561010122, 0.0019435372669249773, 0.0030931378714740276, 0.0012776486109942198, 0.0040903599001467228, 0.0024731436278671026, 0.0021421115379780531, 0.0030963653698563576, 0.0041571068577468395, 0.0041034948080778122, 0.0021266802214086056, 0.0046786684542894363, 0.0047626113519072533, 0.0016185083659365773, 0.001201699604280293, 0.0045337690971791744, 0.0018896764377132058, 0.0031229285523295403, 0.0046549411490559578, 0.0027211862616240978, 0.0028632634785026312, 0.0090181510895490646, 0.0017503488343209028, 0.0036695643793791533, 0.00831582210958004, 0.0032991636544466019, 0.012281297706067562, 0.0031208498403429985, 0.0021626143716275692, 0.0024341235402971506, 0.0028605072293430567, 0.004293038509786129, 0.0033860013354569674, 0.001784419291652739, 0.0021238981280475855, 0.004141960758715868, 0.0017617067787796259, 0.0054977252148091793, 0.0051416358910501003, 0.0010978358332067728, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 5223, 1022, 2418, 10884, 6105, 6182, 2963, -2833, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00011319902841933072, 0.00010569014557404444, 0.00014833529712632298, 0.00019271645578555763, 0.00012970480020157993, 9.9550998129416257e-05, 9.3936941993888468e-05, 0.00022331415675580502, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -31,35,-32,-3,-40,-24,-78,22,7,19,35,37,33,2,-43,11,-44,39,9,-58,28,41,-127,4,-6,10,-32,42,-4,-6,22,23,14,-27,32,14,2,102,-69,-18,-13,18,-29,29,3,6,18,-5, 
  /* [1][0][][] */ -82,-102,-61,3,93,-26,-125,64,-25,-41,-13,-85,-20,77,6,-11,120,-127,-7,-20,-60,1,-1,-21,18,-10,-25,-51,21,-17,-118,-19,24,-64,-82,-104,41,9,-99,-7,1,40,10,79,-11,10,5,48, 
  /* [2][0][][] */ 2,-69,6,57,110,13,97,-8,-33,-26,-2,-49,1,-27,23,34,-36,-91,45,-59,6,-66,-62,10,-73,59,72,-98,-37,-2,-54,-50,18,4,-69,-47,-3,127,76,-37,-11,9,-25,-75,44,37,47,-29, 
  /* [3][0][][] */ 12,6,21,-19,32,29,20,-93,25,20,-20,5,4,-117,-18,0,-24,10,-20,-3,-10,54,-127,3,19,-97,35,35,47,-14,-30,60,0,13,-2,-37,-109,-48,11,-16,-7,-3,39,1,-16,3,0,-52, 
  /* [4][0][][] */ 37,-55,13,66,58,6,-30,-6,-39,-16,21,-31,72,35,-19,30,-49,-65,62,35,33,-49,127,26,-27,10,-56,-22,-6,14,-79,-43,83,-27,-45,-64,-39,-48,-21,1,-64,94,-3,-7,57,79,42,27, 
  /* [5][0][][] */ -74,-23,-43,48,0,15,1,-57,-63,-37,-3,-19,12,45,-70,17,127,-20,52,-84,26,-102,-13,-4,89,-123,-102,-13,59,-49,38,-80,14,-64,-38,24,-78,-17,14,-37,-48,25,98,52,43,18,25,-43, 
  /* [6][0][][] */ -34,6,-37,41,-33,78,-78,11,-19,2,-127,9,54,39,125,22,25,12,49,-15,42,-18,-48,-16,10,4,-75,21,-1,-59,6,-27,36,-43,9,14,-6,-3,-57,-23,-34,49,-21,29,32,33,37,-3, 
  /* [7][0][][] */ 30,-5,40,-16,2,8,13,-13,14,4,-5,-2,-11,-6,0,-12,11,-5,-24,-19,-20,14,127,14,5,-15,1,9,6,-10,-21,13,-2,23,-1,-18,-10,14,8,27,5,-3,10,-2,-16,0,-23,15, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0048109586350619793, 0.0044918311759829521, 0.0063042500987648964, 0.0081904493272304535, 0.0055124536156654358, 0.0042309174314141273, 0.0039923200383782387, 0.0094908513128757477, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 5544, 1424, -261, -963, 8772, 4784, 426, 1260, 6070, -53, -2486, 478, -1102, 322, -1812, 423, 8110, 172, -275, 35143, -947, 15110, -179, 1090, 86, -9133, 6976, -398, 294, -109, 919, 4901, -838, 1234, 367, 914, 6254, 165, 3685, -1192, -12, 406, 22131, -7661, -413, 185, 371, -283, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.4965279307216406e-05, 0.00023894192418083549, 0.0015965751372277737, 0.0017148054903373122, 0.00012566974328365177, 0.00016122865781653672, 9.8006836196873337e-05, 0.00062865804648026824, 0.00012002551375189796, 0.00078357843449339271, 5.4128868214320391e-05, 0.00058222102234140038, 0.0014685613568872213, 0.00014310235565062612, 0.00010397507867310196, 0.010752514936029911, 0.00022772717056795955, 0.0002145286271115765, 0.00065556901972740889, 8.1594516814220697e-05, 0.00081693066749721766, 9.2387926997616887e-05, 0.00029763567727059126, 0.00015980945318005979, 0.00018102186731994152, 0.00083098886534571648, 0.00012263083772268146, 0.00052577315364032984, 0.0011843612883239985, 0.00071817485149949789, 0.00021664329688064754, 0.00011195983097422868, 0.0021355014760047197, 0.00095018948195502162, 0.00022483104839920998, 0.00023542596318293363, 0.00019785054610110819, 5.1319424528628588e-05, 0.00011513153731357306, 0.00041768862865865231, 0.00053775199921801686, 0.00063758128089830279, 6.4397849200759083e-05, 0.00019945731037296355, 0.001082458533346653, 0.0011786487884819508, 0.0066728917881846428, 0.00068341050064191222, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 108,-43,-70,-87,18,-100,63,-58,71,27,87,47,-93,50,59,-120,84,-98,4,-47,-127,-59,37,111,-7,74,-3,70,-127,-27,82,-77,-43,-66,48,84,-127,60,112,80,-30,-127,-80,46,-68,-39,4,-81, 79,-65,79,127,80,32,122,-112,-77,101,53,67,4,55,64,114,85,-96,-102,-53,94,-101,51,-1,110,127,-28,88,6,54,77,-39,52,111,127,127,-93,44,58,-25,99,20,-52,113,127,107,-7,-10, 21,-30,3,-35,35,48,27,-93,-8,50,-77,33,94,-14,-54,-3,37,-35,103,-17,41,-3,-84,-94,22,10,-1,36,33,70,36,5,-1,-48,32,32,-20,19,25,-56,-43,97,3,88,-60,-83,-4,77, 
  /* [0][1][][] */ 127,68,-127,18,-84,-127,69,-63,86,-76,127,-95,94,91,127,121,-40,111,-13,-93,122,-83,49,127,-11,-4,-35,22,-60,89,64,-127,-127,-75,-18,34,-19,116,127,127,-45,-80,-127,52,-3,-30,-127,-127, 122,127,117,-18,-127,7,127,-127,-127,-127,84,-127,40,127,104,-127,-33,127,127,-127,-66,-127,74,-41,64,10,-127,76,8,127,127,-100,121,127,-25,10,-25,127,87,-41,127,-9,-63,127,-11,127,119,45, 21,51,2,11,-29,69,35,-96,-10,-93,-74,-71,-127,1,-63,-2,43,33,-110,-56,-49,-20,-127,-112,-37,5,-70,27,42,74,32,3,8,-64,-7,2,-3,43,22,-76,-61,87,-16,104,8,-88,1,96, 
  /* [0][2][][] */ 38,-49,-29,-1,37,-30,8,-18,60,14,41,43,13,66,-3,-17,-127,-32,-7,-17,21,-42,11,45,85,-17,-10,-94,22,72,-24,-74,-21,-47,-69,-7,69,31,40,73,-93,-55,-123,38,6,-5,89,-64, 5,-75,5,1,33,-3,37,-44,-95,59,11,59,-15,83,4,10,-95,-26,-14,-47,-25,-75,30,-13,127,-15,-38,-127,20,110,-4,-48,34,77,-59,8,77,49,11,-23,-56,-1,-60,98,2,-9,-99,61, -7,-36,24,10,6,13,14,-32,-17,43,-21,29,23,-1,-10,-2,30,-7,21,-33,14,-1,-41,-57,-8,-5,-11,-40,21,104,-11,4,2,-43,-42,-2,65,28,10,-39,-95,51,-34,63,12,4,2,14, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0027610242832452059, 0.010155031457543373, 0.067854441702365875, 0.072879232466220856, 0.0053409640677273273, 0.0068522179499268532, 0.0041652903892099857, 0.026717966422438622, 0.0051010842435061932, 0.033302083611488342, 0.0023004768881946802, 0.024744393303990364, 0.062413856387138367, 0.0060818502679467201, 0.0044189407490193844, 0.45698186755180359, 0.0096784047782421112, 0.0091174663975834846, 0.027861682698130608, 0.0034677668008953333, 0.034719552844762802, 0.0039264867082238197, 0.012649515643715858, 0.0067919017747044563, 0.0076934294775128365, 0.035317026078701019, 0.0052118105813860893, 0.02234535850584507, 0.050335351377725601, 0.030522430315613747, 0.0092073399573564529, 0.0047582928091287613, 0.090758815407752991, 0.040383052080869675, 0.0095553193241357803, 0.010005603544414043, 0.0084086479619145393, 0.0021810755133628845, 0.0048930901102721691, 0.017751766368746758, 0.022854458540678024, 0.027097204700112343, 0.0027369086164981127, 0.0084769353270530701, 0.046004489064216614, 0.050092574208974838, 0.28359788656234741, 0.029044944792985916, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { -825, -7749, 10084, 3480, 9577, 2025, 2581, 251, -1807, -6666, 290, 3178, 16297, -10227, -42, 867113, -6209, 203, 1416, 7242, 7151, 2611, -162, -127, 9647, 23882, 8462, -9663, 2095, -865, -84, -2881, 16929, 7003, 9429, -1110, -9368, 58, -3693, 114, -10642, -8626, -1041, 2211, 5771, -9972, 1742319, -1951, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00033384867128916085, 0.00033136457204818726, 9.1472385975066572e-05, 0.00028072684654034674, 0.0003221791994292289, 0.001282690791413188, 0.0019123195670545101, 0.00062608800362795591, 0.00092554674483835697, 0.00042652917909435928, 0.0044397958554327488, 0.00034464511554688215, 9.3857175670564175e-05, 0.00042432863847352564, 0.0019908265676349401, 4.6088771910035575e-07, 0.00033221844932995737, 0.00048248103121295571, 0.00043505008216015995, 0.00020918721565976739, 0.00019741464348044246, 0.0025702945422381163, 0.0005811703740619123, 0.0010242066346108913, 0.00027485124883241951, 8.1263780884910375e-05, 0.00048798444913700223, 0.00035705478512682021, 0.0015572311822324991, 0.0005034994101151824, 0.00098067719954997301, 0.002509281737729907, 0.00013011676492169499, 0.00029082054970785975, 0.00036122222081758082, 0.00077828281791880727, 0.00048643976333551109, 0.00045104371383786201, 0.0016559263458475471, 0.00042513592052273452, 0.00039140469743870199, 0.00028825804474763572, 0.00037730691838078201, 0.00036773353349417448, 0.00016992926248349249, 0.00031978162587620318, 2.4179252022804576e-07, 0.00080043822526931763, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 13,55,5,-17,93,-22,127,-2, 
  /* [1][0][][] */ 127,70,80,23,-8,-29,3,122, 
  /* [2][0][][] */ -65,15,-3,127,13,-22,-32,55, 
  /* [3][0][][] */ 54,-35,-126,-3,-4,-45,21,127, 
  /* [4][0][][] */ -126,86,-127,-15,12,25,-41,-43, 
  /* [5][0][][] */ 127,-21,-3,-48,-2,-29,7,-125, 
  /* [6][0][][] */ 6,-7,-3,4,-127,-28,59,4, 
  /* [7][0][][] */ -3,-60,-4,1,-26,3,-127,-2, 
  /* [8][0][][] */ -10,25,36,-3,127,18,-54,-20, 
  /* [9][0][][] */ 127,-43,29,5,-5,-27,45,116, 
  /* [10][0][][] */ 127,5,-4,-39,-3,11,0,-123, 
  /* [11][0][][] */ -47,1,2,127,-4,-44,-37,36, 
  /* [12][0][][] */ -127,10,-78,-27,6,97,-67,-119, 
  /* [13][0][][] */ 120,9,127,17,-10,20,23,44, 
  /* [14][0][][] */ -127,-5,13,15,3,-15,9,122, 
  /* [15][0][][] */ 123,-16,-3,-120,3,8,26,-127, 
  /* [16][0][][] */ 72,-66,127,72,-13,-118,31,69, 
  /* [17][0][][] */ 9,-48,-86,127,-1,16,-9,107, 
  /* [18][0][][] */ 19,-35,-113,42,-13,4,40,127, 
  /* [19][0][][] */ 26,14,-10,127,-12,2,-80,-44, 
  /* [20][0][][] */ 12,58,100,-111,7,-77,2,-127, 
  /* [21][0][][] */ 4,0,-8,2,-127,-13,54,0, 
  /* [22][0][][] */ 5,53,-1,-12,1,127,-12,2, 
  /* [23][0][][] */ 127,25,-4,102,-3,3,-45,-127, 
  /* [24][0][][] */ -127,24,-85,-35,22,-42,-43,-64, 
  /* [25][0][][] */ -48,-7,-66,-47,3,-127,6,-46, 
  /* [26][0][][] */ -97,-24,-127,7,9,7,-21,-34, 
  /* [27][0][][] */ 92,1,127,13,-7,46,20,46, 
  /* [28][0][][] */ 7,-58,-22,38,26,-127,2,13, 
  /* [29][0][][] */ -5,-6,23,-127,-12,-10,24,3, 
  /* [30][0][][] */ -40,2,127,-9,1,9,-7,-124, 
  /* [31][0][][] */ 0,12,2,3,127,26,-55,-1, 
  /* [32][0][][] */ -127,-17,-108,-10,-1,-33,-24,-62, 
  /* [33][0][][] */ 16,-57,5,-35,34,-127,9,-15, 
  /* [34][0][][] */ -53,-126,-127,71,3,-49,-6,-22, 
  /* [35][0][][] */ 54,8,-116,-1,0,-4,6,127, 
  /* [36][0][][] */ 61,36,84,22,2,127,11,38, 
  /* [37][0][][] */ -9,16,-2,127,6,-19,-17,12, 
  /* [38][0][][] */ 5,22,13,6,127,30,-47,4, 
  /* [39][0][][] */ -5,10,-14,22,-32,127,-90,-12, 
  /* [40][0][][] */ 127,-16,117,15,-22,25,15,62, 
  /* [41][0][][] */ 125,-3,127,18,-4,12,36,46, 
  /* [42][0][][] */ 56,-66,-17,-39,31,127,24,-36, 
  /* [43][0][][] */ -7,-66,-5,1,-46,-16,-127,6, 
  /* [44][0][][] */ -24,-127,42,91,13,41,9,-115, 
  /* [45][0][][] */ 124,12,127,-1,-8,31,25,45, 
  /* [46][0][][] */ -86,22,3,127,-1,2,-44,77, 
  /* [47][0][][] */ 0,51,-5,-1,0,127,-17,4, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.003073409665375948, 0.0030505410395562649, 0.00084209447959437966, 0.002584370318800211, 0.0029659804422408342, 0.011808446608483791, 0.017604807391762733, 0.0057637640275061131, 0.0085205798968672752, 0.0039266259409487247, 0.040872745215892792, 0.0031728015746921301, 0.00086404883768409491, 0.0039063678123056889, 0.018327541649341583, 4.2429305722180288e-06, 0.0030584018677473068, 0.0044417185708880424, 0.0040050693787634373, 0.0019257767125964165, 0.0018173984717577696, 0.023662121966481209, 0.0053502521477639675, 0.0094288429245352745, 0.0025302795693278313, 0.00074811407830566168, 0.0044923829846084118, 0.0032870450522750616, 0.014335864223539829, 0.0046352138742804527, 0.0090281106531620026, 0.023100439459085464, 0.0011978545226156712, 0.0026772927958518267, 0.0033254104200750589, 0.007164868526160717, 0.004478162620216608, 0.0041523068211972713, 0.015244452282786369, 0.0039137997664511204, 0.0036032702773809433, 0.0026537026278674603, 0.0034734860528260469, 0.0033853536006063223, 0.0015643681399524212, 0.0029439085628837347, 2.2259409888647497e-06, 0.007368831429630518, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 774, 1298, -1129, -8140, 272, -696, 391, 3706, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00023830537975300103, 0.00025342270964756608, 0.00035932037280872464, 0.00018839030235540122, 0.00030253190197981894, 0.00013215941726230085, 0.0003491035895422101, 0.00019538887136150151, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -12,-15,-20,15,-7,-127,11,38, 
  /* [1][0][][] */ -65,24,-127,118,7,62,-18,37, 
  /* [2][0][][] */ 6,-8,26,-4,-10,-127,12,25, 
  /* [3][0][][] */ 21,51,49,127,14,-39,-44,-14, 
  /* [4][0][][] */ 15,52,20,-21,-127,-9,28,-5, 
  /* [5][0][][] */ 54,-25,127,-108,18,-57,-8,-51, 
  /* [6][0][][] */ 32,127,46,-36,36,-9,-67,-21, 
  /* [7][0][][] */ -20,-25,-43,-16,-15,-127,18,42, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.010127978399395943, 0.01077046524733305, 0.01527111604809761, 0.0080065876245498657, 0.012857605703175068, 0.0056167752481997013, 0.014836902730166912, 0.0083040269091725349, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { 2626, -217, 4023, 917, 12373, 838, 292, -4883, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 9.2477428552228957e-05, 0.00048451099428348243, 0.0002352185983909294, 0.0006862673326395452, 0.0002146704209735617, 0.00027352888719178736, 0.00082550576189532876, 0.00011631059169303626, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -16,-4,2,0,-1,27,-5,-3, 20,2,3,-6,10,127,11,127, 8,2,4,-7,-2,16,3,9, 
  /* [0][1][][] */ 13,-127,-15,4,-13,-6,-114,-4, -127,102,-86,127,-127,-8,127,-31, 16,1,-7,-64,-6,1,52,-21, 
  /* [0][2][][] */ 23,-2,-6,-4,-3,-23,4,-2, 68,-1,127,-21,9,-114,3,16, 14,2,-10,-8,-7,-21,-1,2, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0039302906952798367, 0.020591717213392258, 0.0099967904388904572, 0.029166361317038536, 0.0091234929859638214, 0.011624976992607117, 0.035083994269371033, 0.0049431999213993549, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 38106, 2282, 14704, 12391, 9263, 514039, 13384, 24897, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 8.7575856014154851e-05, 7.7799297287128866e-05, 0.00024948161444626749, 7.2271977842319757e-05, 0.00018623842333909124, 6.9317015913838986e-06, 1.9742446966120042e-05, 0.00012204582162667066, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 9,-3,12, 8,-24,30, 12,-24,21, 
  /* [0][1][][] */ 39,29,26, 65,18,58, 24,-33,38, 
  /* [0][2][][] */ -21,-93,-13, -30,-127,-1, -8,-55,17, 
  /* [1][0][][] */ 30,75,23, 5,8,-3, -32,-69,-27, 
  /* [1][1][][] */ 52,121,38, 1,-1,-4, -55,-127,-40, 
  /* [1][2][][] */ 28,44,10, 3,-2,-1, -33,-54,-4, 
  /* [2][0][][] */ 43,92,11, 53,127,13, 16,42,-1, 
  /* [2][1][][] */ -48,-85,-28, -82,-95,-39, -32,-7,-21, 
  /* [2][2][][] */ 0,10,7, 4,16,0, 0,11,-7, 
  /* [3][0][][] */ 46,-30,-15, 79,-34,-38, 30,-17,-13, 
  /* [3][1][][] */ 80,-54,-36, 127,-53,-73, 58,-29,-30, 
  /* [3][2][][] */ 19,-21,-5, 41,-28,-16, 14,-13,-4, 
  /* [4][0][][] */ -12,-23,-4, 27,45,10, -16,-29,-4, 
  /* [4][1][][] */ -29,-59,-9, 63,127,19, -34,-61,-7, 
  /* [4][2][][] */ -9,-13,3, 21,25,-3, -12,-13,-2, 
  /* [5][0][][] */ -31,-57,-30, -53,-86,-52, -46,-35,-29, 
  /* [5][1][][] */ -50,-101,-44, -79,-127,-63, -50,-42,-34, 
  /* [5][2][][] */ -3,1,-14, -7,-7,-12, -8,2,-6, 
  /* [6][0][][] */ -100,-7,35, 0,19,-13, 62,16,-20, 
  /* [6][1][][] */ -127,-35,43, 12,20,-26, 104,15,-31, 
  /* [6][2][][] */ -51,-13,18, 14,-7,-1, 33,-13,31, 
  /* [7][0][][] */ -5,16,-2, -15,22,-8, -7,20,-9, 
  /* [7][1][][] */ 18,84,-6, 23,127,-23, -2,60,-28, 
  /* [7][2][][] */ -27,-50,-21, -42,-52,-33, -20,3,-20, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.022331841289997101, 0.019838819280266762, 0.063617810606956482, 0.018429353833198547, 0.047490794211626053, 0.001767583773471415, 0.0050343237817287445, 0.031121682375669479, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11075671762228012, } };
const TfArray<1, int> quant46_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.10862485319375992, } };
const TfArray<1, int> quant47_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.086345851421356201, } };
const TfArray<1, int> quant51_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.077703848481178284, } };
const TfArray<1, int> quant54_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.1024545282125473, } };
const TfArray<1, int> quant55_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.065515168011188507, } };
const TfArray<1, int> quant59_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.036334794014692307, } };
const TfArray<1, int> quant62_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.06470201164484024, } };
const TfArray<1, int> quant63_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.02220965176820755, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.042332440614700317, } };
const TfArray<1, int> quant66_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.076527372002601624, } };
const TfArray<1, int> quant67_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.042006216943264008, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.071672700345516205, } };
const TfArray<1, int> quant70_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
